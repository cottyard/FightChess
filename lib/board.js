// Generated by CoffeeScript 1.8.0
(function() {
  var Board, hovering_coord, init, on_drop, on_hover, on_mousedown, on_mousemove, on_mouseup, on_pick, paint_pieces_on_board, picking_piece;

  Board = (function() {
    var piece_arrangement;

    piece_arrangement = ['rook', 'knight', 'bishop', 'queen', 'king', 'bishop', 'knight', 'rook'];

    function Board() {
      var i, j, x, _i, _j;
      this.board = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 1; _i <= 8; i = ++_i) {
          _results.push((function() {
            var _j, _results1;
            _results1 = [];
            for (j = _j = 1; _j <= 8; j = ++_j) {
              _results1.push(null);
            }
            return _results1;
          })());
        }
        return _results;
      })();
      for (x = _i = 1; _i <= 8; x = ++_i) {
        this.place_piece(new piece.Piece('white', 'pawn', [x, 7], this));
        this.place_piece(new piece.Piece('white', piece_arrangement[x - 1], [x, 8], this));
      }
      for (x = _j = 1; _j <= 8; x = ++_j) {
        this.place_piece(new piece.Piece('black', 'pawn', [x, 2], this));
        this.place_piece(new piece.Piece('black', piece_arrangement[x - 1], [x, 1], this));
      }
    }

    Board.prototype.is_occupied = function(_arg) {
      var coord_x, coord_y;
      coord_x = _arg[0], coord_y = _arg[1];
      return this.board[coord_x - 1][coord_y - 1] != null;
    };

    Board.prototype.get_piece = function(_arg) {
      var coord_x, coord_y;
      coord_x = _arg[0], coord_y = _arg[1];
      return this.board[coord_x - 1][coord_y - 1];
    };

    Board.prototype.lift_piece = function(_arg) {
      var coord_x, coord_y;
      coord_x = _arg[0], coord_y = _arg[1];
      return this.board[coord_x - 1][coord_y - 1] = null;
    };

    Board.prototype.place_piece = function(piece) {
      var coord_x, coord_y, _ref;
      _ref = piece.coordinate, coord_x = _ref[0], coord_y = _ref[1];
      return this.board[coord_x - 1][coord_y - 1] = piece;
    };

    return Board;

  })();

  paint_pieces_on_board = function(ctx) {
    var i, j, _i, _results;
    shape.clear_canvas(ctx);
    _results = [];
    for (i = _i = 1; _i <= 8; i = ++_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (j = _j = 1; _j <= 8; j = ++_j) {
          if (!board.chess_board.is_occupied([i, j])) {
            continue;
          }
          _results1.push(paint.piece(ctx, board.chess_board.get_piece([i, j])));
        }
        return _results1;
      })());
    }
    return _results;
  };

  picking_piece = null;

  on_pick = function(evt) {
    var mo, moves, mr, _i, _j, _len, _len1, _ref, _ref1, _results;
    if (!board.chess_board.is_occupied(evt.coord)) {
      return;
    }
    picking_piece = board.chess_board.get_piece(evt.coord);
    paint.mark_grid(ui.ctx["static"], evt.coord);
    moves = picking_piece.valid_moves();
    _ref = moves.regular;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      mr = _ref[_i];
      paint.mark_grid(ui.ctx["static"], mr, shape.style_green_tp);
    }
    _ref1 = moves.offensive;
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      mo = _ref1[_j];
      _results.push(paint.mark_grid(ui.ctx["static"], mo, shape.style_red_tp));
    }
    return _results;
  };

  on_drop = function(evt) {
    var moves;
    moves = picking_piece.valid_moves();
    if (calc.coord_one_of(evt.coord, moves.regular) || calc.coord_one_of(evt.coord, moves.offensive)) {
      picking_piece.move_to(evt.coord);
    }
    picking_piece = null;
    paint_pieces_on_board(ui.ctx["static"]);
    return shape.clear_canvas(ui.ctx.animate);
  };

  on_hover = function(evt) {
    ui.textarea.value = "" + evt.coord;
    if (picking_piece || board.chess_board.is_occupied(evt.coord)) {
      return ui.cvs.animate.style.cursor = "pointer";
    } else {
      return ui.cvs.animate.style.cursor = "default";
    }
  };

  on_mousedown = function(evt) {
    var coord;
    coord = calc.pos_to_coord(evt.pos);
    return ev.trigger('pick', {
      coord: coord
    });
  };

  on_mouseup = function(evt) {
    var coord;
    if (!picking_piece) {
      return;
    }
    coord = calc.pos_to_coord(evt.pos);
    return ev.trigger('drop', {
      coord: coord
    });
  };

  hovering_coord = [-1, -1];

  on_mousemove = function(evt) {
    var coord;
    coord = calc.pos_to_coord(evt.pos);
    if (!calc.coord_equal(hovering_coord, coord)) {
      ev.trigger('hover', {
        coord: coord
      });
    }
    hovering_coord = coord;
    if (!picking_piece) {
      return;
    }
    shape.clear_canvas(ui.ctx.animate);
    shape.set_style(ui.ctx.animate, shape.style_tp);
    return paint.piece_at(ui.ctx.animate, picking_piece, evt.pos);
  };

  init = function() {
    board.chess_board = new Board();
    paint_pieces_on_board(ui.ctx["static"]);
    ev.hook('mousedown', on_mousedown);
    ev.hook('mouseup', on_mouseup);
    ev.hook('mousemove', on_mousemove);
    ev.hook('pick', on_pick);
    ev.hook('drop', on_drop);
    return ev.hook('hover', on_hover);
  };

  window.board = {
    init: init,
    chess_board: null,
    paint_pieces_on_board: paint_pieces_on_board
  };

}).call(this);
