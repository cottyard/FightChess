// Generated by CoffeeScript 1.8.0
(function() {
  var Board, Piece, init, paint_pieces_on_board, piece_arrangement;

  Board = (function() {
    function Board() {
      var i, j;
      this.board = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 1; _i <= 8; i = ++_i) {
          _results.push((function() {
            var _j, _results1;
            _results1 = [];
            for (j = _j = 1; _j <= 8; j = ++_j) {
              _results1.push(null);
            }
            return _results1;
          })());
        }
        return _results;
      })();
    }

    Board.prototype.is_occupied = function(_arg) {
      var coord_x, coord_y;
      coord_x = _arg[0], coord_y = _arg[1];
      return this.board[coord_x - 1][coord_y - 1] != null;
    };

    Board.prototype.get_piece = function(_arg) {
      var coord_x, coord_y;
      coord_x = _arg[0], coord_y = _arg[1];
      return this.board[coord_x - 1][coord_y - 1];
    };

    Board.prototype.lift_piece = function(_arg) {
      var coord_x, coord_y;
      coord_x = _arg[0], coord_y = _arg[1];
      return this.board[coord_x - 1][coord_y - 1] = null;
    };

    Board.prototype.place_piece = function(piece) {
      var coord_x, coord_y, _ref;
      _ref = piece.coordinate, coord_x = _ref[0], coord_y = _ref[1];
      return this.board[coord_x - 1][coord_y - 1] = piece;
    };

    return Board;

  })();

  piece_arrangement = ['rook', 'knight', 'bishop', 'queen', 'king', 'bishop', 'knight', 'rook'];

  Piece = (function() {
    function Piece(color, type, coordinate, board) {
      this.color = color;
      this.type = type;
      this.coordinate = coordinate;
      this.board = board;
    }

    Piece.prototype.move_to = function(new_coord) {
      if (this.is_onboard()) {
        this.board.lift_piece(this.coordinate);
      }
      this.coordinate = new_coord;
      if (new_coord != null) {
        return this.board.place_piece(this);
      }
    };

    Piece.prototype.is_onboard = function() {
      return this.coordinate != null;
    };

    return Piece;

  })();

  paint_pieces_on_board = function(ctx) {
    var i, j, _i, _results;
    shape.clear_canvas(ctx);
    _results = [];
    for (i = _i = 1; _i <= 8; i = ++_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (j = _j = 1; _j <= 8; j = ++_j) {
          if (!board.chess_board.is_occupied([i, j])) {
            continue;
          }
          _results1.push(paint.piece(ctx, board.chess_board.get_piece([i, j])));
        }
        return _results1;
      })());
    }
    return _results;
  };

  init = function() {
    var x, _i, _j;
    board.chess_board = new Board();
    for (x = _i = 1; _i <= 8; x = ++_i) {
      board.chess_board.place_piece(new Piece('white', 'pawn', [x, 7], board.chess_board));
      board.chess_board.place_piece(new Piece('white', piece_arrangement[x - 1], [x, 8], board.chess_board));
    }
    for (x = _j = 1; _j <= 8; x = ++_j) {
      board.chess_board.place_piece(new Piece('black', 'pawn', [x, 2], board.chess_board));
      board.chess_board.place_piece(new Piece('black', piece_arrangement[x - 1], [x, 1], board.chess_board));
    }
    return paint_pieces_on_board(game.ctx["static"]);
  };

  window.board = {
    init: init,
    chess_board: null,
    paint_pieces_on_board: paint_pieces_on_board
  };

}).call(this);
