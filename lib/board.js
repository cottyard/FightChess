// Generated by CoffeeScript 1.8.0
(function() {
  var coord_to_pos, ctx, ctx_background, cvs, cvs_background, cvs_border_width, cvs_bounding_rect, cvs_size, down_pos, draw_board, draw_piece, draw_pieces, drawing, get_mouse_pos, grid_size, hoop, on_mousedown, on_mousemove, on_mouseup, piece, piece_arrangement, pos_to_coord, set_canvas_attr, start, textarea;

  cvs_border_width = 3;

  cvs_size = 400;

  grid_size = cvs_size / 8;

  cvs = null;

  ctx = null;

  cvs_background = null;

  ctx_background = null;

  cvs_bounding_rect = null;

  textarea = null;

  draw_board = function(ctx, size) {
    var x, y, _i, _j;
    ctx.save();
    util.set_style(ctx, util.style_brown);
    for (x = _i = 0; grid_size > 0 ? _i < size : _i > size; x = _i += grid_size) {
      for (y = _j = 0; grid_size > 0 ? _j < size : _j > size; y = _j += grid_size) {
        if ((x + y) / grid_size % 2 !== 0) {
          util.rectangle(ctx, x, y, grid_size, grid_size, true);
        }
      }
    }
    return ctx.restore();
  };

  set_canvas_attr = function(cvs, z_index, size) {
    cvs.style.border = "solid #000 " + cvs_border_width + "px";
    cvs.style.position = "absolute";
    cvs.style['z-index'] = "" + z_index;
    return cvs.width = cvs.height = size;
  };

  piece = {
    black: {
      pawn: '\u265F',
      knight: '\u265E',
      bishop: '\u265D',
      rook: '\u265C',
      queen: '\u265B',
      king: '\u265A'
    },
    white: {
      pawn: '\u2659',
      knight: '\u2658',
      bishop: '\u2657',
      rook: '\u2656',
      queen: '\u2655',
      king: '\u2654'
    }
  };

  piece_arrangement = ['rook', 'knight', 'bishop', 'queen', 'king', 'bishop', 'knight', 'rook'];

  hoop = function(num, _arg) {
    var range_lower, range_upper;
    range_lower = _arg[0], range_upper = _arg[1];
    if (num < range_lower) {
      num = range_lower;
    }
    if (num > range_upper) {
      num = range_upper;
    }
    return num;
  };

  coord_to_pos = function(_arg) {
    var pos_x, pos_y, x, y;
    x = _arg[0], y = _arg[1];
    pos_x = grid_size * (x - 1) + 5;
    pos_y = grid_size * (y - 1) + 40;
    return [pos_x, pos_y];
  };

  pos_to_coord = function(_arg) {
    var coord_x, coord_y, x, y;
    x = _arg[0], y = _arg[1];
    coord_x = hoop(Math.floor(x / grid_size) + 1, [1, 8]);
    coord_y = hoop(Math.floor(y / grid_size) + 1, [1, 8]);
    return [coord_x, coord_y];
  };

  draw_piece = function(piece, coord_x, coord_y) {
    var pos_x, pos_y, _ref;
    _ref = coord_to_pos([coord_x, coord_y]), pos_x = _ref[0], pos_y = _ref[1];
    return util.text(ctx, piece, pos_x, pos_y);
  };

  draw_pieces = function() {
    var x, _i, _j, _results;
    for (x = _i = 1; _i <= 8; x = ++_i) {
      draw_piece(piece.white.pawn, x, 7);
      draw_piece(piece.white[piece_arrangement[x - 1]], x, 8);
    }
    _results = [];
    for (x = _j = 1; _j <= 8; x = ++_j) {
      draw_piece(piece.black.pawn, x, 2);
      _results.push(draw_piece(piece.black[piece_arrangement[x - 1]], x, 1));
    }
    return _results;
  };

  start = function() {
    cvs = document.getElementById('cream');
    ctx = cvs.getContext('2d');
    cvs_bounding_rect = cvs.getBoundingClientRect();
    cvs_background = document.getElementById('board');
    ctx_background = cvs_background.getContext('2d');
    set_canvas_attr(cvs_background, 1, cvs_size);
    set_canvas_attr(cvs, 2, cvs_size);
    ctx.font = "40px Courier New";
    draw_board(ctx_background, cvs_size);
    draw_pieces();
    textarea = document.getElementById('mousepos');
    return cvs.addEventListener("mousemove", on_mousemove, false);
  };

  get_mouse_pos = function(evt) {
    var mouse_x, mouse_y;
    mouse_x = evt.clientX - cvs_bounding_rect.left - cvs_border_width;
    mouse_y = evt.clientY - cvs_bounding_rect.top - cvs_border_width;
    return [mouse_x, mouse_y];
  };

  down_pos = [];

  drawing = false;

  on_mousedown = function(evt) {
    down_pos = get_mouse_pos(evt);
    return drawing = true;
  };

  on_mouseup = function(evt) {
    var pos;
    drawing = false;
    util.clear_canvas(ctx, cvs);
    pos = get_mouse_pos(evt);
    util.set_style(ctx_background, util.style_red_tp);
    return util.arrow(ctx_background, down_pos[0], down_pos[1], pos[0], pos[1]);
  };

  on_mousemove = function(evt) {
    return textarea.value = pos_to_coord(get_mouse_pos(evt));
  };

  window.board = {
    start: start
  };

}).call(this);
