// Generated by CoffeeScript 1.8.0
(function() {
  var coord_equal, coord_one_of, coord_to_pos, get_segment_angle, hoop, pos_to_coord, randint, remove_item_from_array, shrink_segment;

  remove_item_from_array = function(item, arr) {
    var index;
    index = arr.indexOf(item);
    if (index !== -1) {
      return arr.splice(index, 1);
    }
  };

  randint = function(_arg) {
    var lower, upper;
    upper = _arg[0], lower = _arg[1];
    return Math.floor((Math.random() * (upper - lower + 1)) + lower);
  };

  shrink_segment = function(point_from, point_to, length) {
    var angle, dx, dy, to_x, to_y, x, y;
    if (length == null) {
      length = 15;
    }
    x = point_from[0], y = point_from[1];
    to_x = point_to[0], to_y = point_to[1];
    angle = get_segment_angle(x, y, to_x, to_y);
    dx = length * Math.sin(angle);
    dy = length * Math.cos(angle);
    x += dx;
    y -= dy;
    to_x -= dx;
    to_y += dy;
    return [[x, y], [to_x, to_y]];
  };

  get_segment_angle = function(x, y, to_x, to_y) {
    var angle, delta_x, delta_y;
    delta_x = to_x - x;
    delta_y = to_y - y;
    if (delta_x === 0) {
      angle = delta_y > 0 ? Math.PI : 0;
    } else {
      angle = Math.atan(delta_y / delta_x);
      if (delta_x < 0) {
        angle -= Math.PI / 2;
      } else {
        angle += Math.PI / 2;
      }
    }
    return angle;
  };

  hoop = function(num, _arg) {
    var range_lower, range_upper;
    range_lower = _arg[0], range_upper = _arg[1];
    if (num < range_lower) {
      num = range_lower;
    }
    if (num > range_upper) {
      num = range_upper;
    }
    return num;
  };

  coord_to_pos = function(_arg) {
    var pos_x, pos_y, x, y;
    x = _arg[0], y = _arg[1];
    pos_x = settings.grid_size * (x - 0.5);
    pos_y = settings.grid_size * (y - 0.5);
    return [pos_x, pos_y];
  };

  pos_to_coord = function(_arg) {
    var coord_x, coord_y, x, y;
    x = _arg[0], y = _arg[1];
    coord_x = hoop(Math.floor(x / settings.grid_size) + 1, [1, 8]);
    coord_y = hoop(Math.floor(y / settings.grid_size) + 1, [1, 8]);
    return [coord_x, coord_y];
  };

  coord_equal = function(coord_1, coord_2) {
    return coord_1[0] === coord_2[0] && coord_1[1] === coord_2[1];
  };

  coord_one_of = function(coord, coord_list) {
    var c, _i, _len;
    for (_i = 0, _len = coord_list.length; _i < _len; _i++) {
      c = coord_list[_i];
      if (coord_equal(coord, c)) {
        return true;
      }
    }
    return false;
  };

  window.calc = {
    coord_to_pos: coord_to_pos,
    pos_to_coord: pos_to_coord,
    coord_equal: coord_equal,
    coord_one_of: coord_one_of,
    get_segment_angle: get_segment_angle,
    shrink_segment: shrink_segment,
    randint: randint,
    remove_item_from_array: remove_item_from_array
  };

}).call(this);
