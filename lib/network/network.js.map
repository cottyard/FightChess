{
  "version": 3,
  "file": "network.js",
  "sourceRoot": "..\\..",
  "sources": [
    "src\\network\\network.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;AAAA,MAAA,mBAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,cAAA,EAAA,kBAAA,EAAA;;EAAA,OAAA,GAAU;;EAEV,SAAA,GAAY,QAAA,CAAC,IAAD,EAAO,OAAP,CAAA;WACV,CACE,IADF,EAEE,OAFF;EADU;;EAMZ,mBAAA,GAAsB,QAAA,CAAC,IAAD,EAAO,EAAP,CAAA;AACpB,QAAA;IAAA,EAAA,GAAK,IAAI,UAAJ,CAAA;IACL,EAAE,CAAC,MAAH,GAAY,QAAA,CAAC,GAAD,CAAA;aACV,EAAA,CAAG,GAAG,CAAC,MAAM,CAAC,MAAd;IADU;WAEZ,EAAE,CAAC,iBAAH,CAAqB,IAArB;EAJoB;;EAMtB,cAAA,GAAiB,QAAA,CAAC,IAAD,CAAA;WACf,QAAA,CAAC,GAAD,CAAA;AACE,UAAA;MAAA,IAAc,eAAd;AAAA,eAAA;;MACA,IAAA,GAAO,UAAU,CAAC,IAAX,CAAgB,SAAA,CAAU,IAAV,EAAgB,GAAhB,CAAhB;aACP,mBAAA,CAAoB,IAApB,EAA0B,QAAA,CAAC,EAAD,CAAA;eACxB,OAAO,CAAC,IAAR,CAAa,EAAb;MADwB,CAA1B;IAHF;EADe;;EAQjB,kBAAA,GAAqB,QAAA,CAAC,IAAD,CAAA;WACnB,OAAA,GAAU;EADS;;EAGrB,IAAA,GAAO,QAAA,CAAA,CAAA;IACL,EAAE,CAAC,IAAH,CAAQ,uBAAR,EAAiC,cAAA,CAAe,WAAf,CAAjC;WACA,EAAE,CAAC,IAAH,CAAQ,uBAAR,EAAiC,cAAA,CAAe,WAAf,CAAjC;EAFK;;EAIP,QAAA,GAAW,QAAA,CAAC,IAAD,CAAA;IACT,IAAA,GAAO,UAAU,CAAC,MAAX,CAAkB,IAAlB;AAEP,YAAO,IAAI,CAAC,IAAZ;AAAA,WACO,WADP;eAEI,EAAE,CAAC,OAAH,CAAW,sBAAX,EAAmC;UAAE,SAAA,EAAW,IAAI,CAAC,OAAO,CAAC,SAA1B;UAAqC,UAAA,EAAY,IAAI,CAAC,OAAO,CAAC;QAA9D,CAAnC;AAFJ,WAGO,WAHP;eAII,EAAE,CAAC,OAAH,CAAW,sBAAX,EAAmC;UAAE,SAAA,EAAW,IAAI,CAAC,OAAO,CAAC;QAA1B,CAAnC;AAJJ;EAHS;;EAUX,MAAM,CAAC,OAAP,GAAiB,CACf,IADe,EAEf,QAFe,EAGf,kBAHe;AAvCjB",
  "sourcesContent": [
    "channel = null\r\n\r\nwrap_data = (type, content) ->\r\n  {\r\n    type,\r\n    content\r\n  }\r\n\r\nblob_to_arraybuffer = (blob, cb) ->\r\n  fr = new FileReader();\r\n  fr.onload = (evt) ->\r\n    cb(evt.target.result)\r\n  fr.readAsArrayBuffer(blob)\r\n\r\non_network_out = (type) ->\r\n  (evt) ->\r\n    return unless channel?\r\n    data = BinaryPack.pack(wrap_data type, evt)\r\n    blob_to_arraybuffer(data, (ab) ->\r\n      channel.send ab\r\n    )\r\n\r\nset_output_channel = (conn) ->\r\n  channel = conn\r\n\r\ninit = ->\r\n  ev.hook 'network_out_gamestate', on_network_out 'gamestate'\r\n  ev.hook 'network_out_operation', on_network_out 'operation'\r\n\r\nincoming = (data) ->\r\n  data = BinaryPack.unpack data\r\n\r\n  switch data.type\r\n    when 'gamestate'\r\n      ev.trigger 'network_in_gamestate', { gamestate: data.content.gamestate, boardstate: data.content.boardstate }\r\n    when 'operation'\r\n      ev.trigger 'network_in_operation', { operation: data.content.operation }\r\n\r\n\r\nwindow.network = {\r\n  init,\r\n  incoming,\r\n  set_output_channel\r\n}"
  ]
}