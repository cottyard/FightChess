// Generated by CoffeeScript 2.2.1
(function() {
  var answer_remote, change_status, create_local_offer, data, disable, enable, err_handler, get_clipboard, hide, hook_data_channel, init, init_data_channel, inputs, local_answer_onclick, local_offer_onclick, receive_data_channel, remote_onpaste, send_message, set_clipboard, status_binds;

  data = {
    'status': ['host', 'begin'],
    'connection': 'connection',
    'channel': 'channel'
  };

  inputs = {'role_btn': 'role_btn', 'local_offer_btn': 'local_offer_btn', 'local_answer_btn': 'local_answer_btn', 'status': 'status', 'send_txt': 'send_txt', 'chat': 'chat'};

  change_status = function(status) {
    var phase, type;
    data.status = status;
    [type, phase] = status;
    return status_binds[type][phase]();
  };

  status_binds = {
    'host': {
      'begin': function() {
        enable(inputs.local_offer_btn);
        hide(inputs.local_answer_btn);
        return inputs.status.value = 'Please send your offer to your peer.';
      },
      'pending': function() {
        enable(inputs.local_offer_btn);
        hide(inputs.local_answer_btn);
        return inputs.status.value = 'Please paste the answer you received from your peer.';
      },
      'connected': function() {
        hide(inputs.local_offer_btn);
        hide(inputs.local_answer_btn);
        return inputs.status.value = 'You are connected to your peer.';
      }
    },
    'guest': {
      'begin': function() {
        hide(inputs.local_offer_btn);
        disable(inputs.local_answer_btn);
        return inputs.status.value = 'Please paste the offer you received from your peer.';
      },
      'pending': function() {
        hide(inputs.local_offer_btn);
        enable(inputs.local_answer_btn);
        return inputs.status.value = 'Please send the answer to your peer.';
      },
      'connected': function() {
        hide(inputs.local_offer_btn);
        hide(inputs.local_answer_btn);
        return inputs.status.value = 'You are connected to your peer.';
      }
    }
  };

  init = function() {
    var i;
    for (i in inputs) {
      inputs[i] = document.getElementById(i);
    }
    change_status(data.status);
    data.connection = new RTCPeerConnection({
      iceServers: [
        {
          urls: []
        }
      ]
    });
    init_data_channel(data.connection);
    data.connection.ondatachannel = receive_data_channel;
    return document.addEventListener('paste', remote_onpaste);
  };

  enable = function(btn) {
    btn.style.display = '';
    return btn.disabled = false;
  };

  disable = function(btn) {
    btn.style.display = '';
    return btn.disabled = true;
  };

  hide = function(btn) {
    return btn.style.display = 'none';
  };

  set_clipboard = function(message) {
    var dummy;
    dummy = document.createElement("input");
    document.body.appendChild(dummy);
    dummy.setAttribute("value", message);
    dummy.select();
    document.execCommand("copy");
    console.log("copied" + dummy.value);
    return document.body.removeChild(dummy);
  };

  get_clipboard = function(evt) {
    return evt.clipboardData.getData('Text');
  };

  init_data_channel = function(conn) {
    data.channel = conn.createDataChannel('data');
    return hook_data_channel(data.channel);
  };

  receive_data_channel = function(e) {
    console.log('received channel', e);
    data.channel = e.channel;
    return hook_data_channel(data.channel);
  };

  create_local_offer = function() {
    return data.connection.createOffer().then((des) => {
      return data.connection.setLocalDescription(des).catch(err_handler);
    }).catch(err_handler);
  };

  local_offer_onclick = function() {
    var sdp;
    sdp = null;
    create_local_offer().then(() => {
      return sdp = JSON.stringify(data.connection.localDescription);
    });
    setTimeout((() => {
      return set_clipboard(sdp);
    }), 1000);
    return change_status(['host', 'pending']);
  };

  remote_onpaste = function(evt) {
    var phase, type;
    [type, phase] = data.status;
    if (type === 'host' && phase === 'pending') {
      answer_remote(get_clipboard(evt));
    }
    if (type === 'guest' && phase === 'begin') {
      answer_remote(get_clipboard(evt));
      return change_status(['guest', 'pending']);
    }
  };

  local_answer_onclick = function() {
    return set_clipboard(JSON.stringify(data.connection.localDescription));
  };

  answer_remote = function(remote_sdp) {
    var remote_des;
    remote_des = new RTCSessionDescription(JSON.parse(remote_sdp));
    return data.connection.setRemoteDescription(remote_des).then(() => {
      return data.connection.createAnswer().then((des) => {
        return data.connection.setLocalDescription(des).catch(err_handler);
      }).catch(err_handler);
    }).catch(err_handler);
  };

  hook_data_channel = function(data_channel) {
    data_channel.onopen = function(e) {
      var phase, type;
      console.log('chat channel is open', e);
      [type, phase] = data.status;
      return change_status([type, 'connected']);
    };
    data_channel.onmessage = function(e) {
      console.log('received' + e.data);
      return inputs.chat.innerHTML = inputs.chat.innerHTML + "<pre>" + e.data + "</pre>";
    };
    return data_channel.onclose = function() {
      return console.log('chat channel closed');
    };
  };

  err_handler = function(err) {
    return console.log(err);
  };

  send_message = function() {
    var text;
    text = inputs.send_txt.value;
    chat.innerHTML = chat.innerHTML + "<pre class=sent>" + text + "</pre>";
    data.channel.send(text);
    return inputs.send_txt.value = "";
  };

  window.peer = {init, change_status, local_offer_onclick, local_answer_onclick, send_message};

}).call(this);
