// Generated by CoffeeScript 2.2.1
(function() {
  var connect, connection, handle_network_in, init, init_connection, login, me, on_network_out, peer_error_callbacks, peer_error_handler, wait, wrap_data;

  me = null;

  connection = null;

  peer_error_callbacks = {};

  peer_error_handler = function(err) {
    var name;
    console.log(err);
    return typeof peer_error_callbacks[name = err.type] === "function" ? peer_error_callbacks[name](err) : void 0;
  };

  wait = function(callback) {
    return me.on('connection', function(conn) {
      init_connection(conn);
      return callback(conn.peer);
    });
  };

  connect = function(id, callback_success, callback_failure) {
    var conn;
    conn = me.connect(id);
    conn.on('open', function() {
      init_connection(conn);
      return callback_success();
    });
    return peer_error_callbacks['peer-unavailable'] = function() {
      return callback_failure();
    };
  };

  init_connection = function(conn) {
    conn.on('data', function(data) {
      return handle_network_in(data);
    });
    return connection = conn;
  };

  login = function(id, callback_success, callback_failure) {
    me = new Peer(id, {
      key: '6l7puzc60rgujtt9'
    });
    me.on('open', function(id) {
      return callback_success();
    });
    me.on('error', peer_error_handler);
    return peer_error_callbacks['network'] = function() {
      me = null;
      return callback_failure();
    };
  };

  handle_network_in = function(data) {
    switch (data.type) {
      case 'gamestate':
        return ev.trigger('network_in_gamestate', {
          gamestate: data.content.gamestate,
          boardstate: data.content.boardstate
        });
      case 'operation':
        return ev.trigger('network_in_operation', {
          operation: data.content.operation
        });
    }
  };

  wrap_data = function(type, content) {
    return {type, content};
  };

  on_network_out = function(type) {
    return function(evt) {
      if (connection == null) {
        return;
      }
      return connection.send(wrap_data(type, evt));
    };
  };

  init = function() {
    ev.hook('network_out_gamestate', on_network_out('gamestate'));
    return ev.hook('network_out_operation', on_network_out('operation'));
  };

  window.network = {init, wait, connect, login};

}).call(this);

//# sourceMappingURL=network.js.map
