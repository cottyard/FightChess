// Generated by CoffeeScript 1.8.0
(function() {
  var connect, connection, handle_network_in, init, init_connection, login, me, on_network_out, wait, wrap_data;

  me = null;

  connection = null;

  wait = function(callback) {
    return me.on('connection', function(conn) {
      return init_connection(conn, function() {
        return callback(conn.peer);
      });
    });
  };

  connect = function(id, callback) {
    var conn;
    conn = me.connect(id);
    return conn.on('open', function() {
      return init_connection(conn, callback);
    });
  };

  init_connection = function(conn, callback) {
    conn.on('data', function(data) {
      return handle_network_in(data);
    });
    connection = conn;
    return callback();
  };

  login = function(id, callback) {
    me = new Peer(id, {
      key: '6l7puzc60rgujtt9'
    });
    return me.on('open', function(id) {
      return callback();
    });
  };

  handle_network_in = function(data) {
    switch (data.type) {
      case 'gamestate':
        return ev.trigger('network_in_gamestate', {
          gamestate: data.content
        });
      case 'operation':
        return ev.trigger('network_in_operation', {
          operation: data.content
        });
    }
  };

  wrap_data = function(type, content) {
    return {
      type: type,
      content: content
    };
  };

  on_network_out = function(type, content_name) {
    return function(evt) {
      if (connection == null) {
        return;
      }
      return connection.send(wrap_data(type, evt[content_name]));
    };
  };

  init = function() {
    ev.hook('network_out_gamestate', on_network_out('gamestate', 'gamestate'));
    return ev.hook('network_out_operation', on_network_out('operation', 'operation'));
  };

  window.network = {
    init: init,
    wait: wait,
    connect: connect,
    login: login
  };

}).call(this);
