// Generated by CoffeeScript 2.2.1
(function() {
  var ctx, cvs, disable, disable_button, enable, enable_button, hide, init, init_cvs, message_timeout_obj, set_button_text, set_canvas_attr, show_message, widgets;

  ctx = {
    animate: null,
    static: null,
    background: null
  };

  cvs = {
    animate: null,
    static: null,
    background: null
  };

  init_cvs = function(name) {
    cvs[name] = document.getElementById(name);
    return ctx[name] = cvs[name].getContext('2d');
  };

  set_canvas_attr = function(cvs, z_index, size) {
    cvs.style.border = `solid #000 ${settings.cvs_border_width}px`;
    cvs.style.position = "absolute";
    cvs.style['z-index'] = `${z_index}`;
    return cvs.width = cvs.height = size;
  };

  set_button_text = function(button, text) {
    return button.innerHTML = text;
  };

  disable_button = function(button) {
    return button.disabled = 'disabled';
  };

  enable_button = function(button) {
    return button.disabled = void 0;
  };

  message_timeout_obj = null;

  show_message = function(message) {
    ui.message.innerHTML = message;
    clearTimeout(message_timeout_obj);
    return message_timeout_obj = setTimeout((function() {
      return ui.message.innerHTML = '';
    }), 5000);
  };

  enable = function(btn) {
    btn.style.display = '';
    return btn.disabled = false;
  };

  disable = function(btn) {
    btn.style.display = '';
    return btn.disabled = true;
  };

  hide = function(btn) {
    return btn.style.display = 'none';
  };

  init = function() {
    var w;
    init_cvs('background');
    init_cvs('static');
    init_cvs('animate');
    ui.cvs_bounding_rect = function() {
      return cvs.animate.getBoundingClientRect();
    };
    set_canvas_attr(cvs.background, 1, settings.cvs_size);
    set_canvas_attr(cvs.static, 2, settings.cvs_size);
    set_canvas_attr(cvs.animate, 3, settings.cvs_size);
    ctx.static.font = settings.piece_font;
    ctx.animate.font = settings.piece_font;
    paint.background(ctx.background, settings.cvs_size);
    for (w in widgets) {
      ui[w] = document.getElementById(w);
    }
    ui.ai_interval = document.getElementById('ai_interval');
    ui.ai = document.getElementById('ai');
    return ui.startgame.onclick = function() {
      return ev.trigger('game_start', {});
    };
  };

  widgets = {'info': 'info', 'message': 'message', 'player_id': 'player_id', 'opponent_id': 'opponent_id', 'login_button': 'login_button', 'challenge_button': 'challenge_button', 'spawntime': 'spawntime', 'gamestat': 'gamestat', 'startgame': 'startgame', 'radio_host': 'radio_host', 'radio_guest': 'radio_guest', 'local_offer_btn': 'local_offer_btn', 'local_answer_btn': 'local_answer_btn', 'p2p_status': 'p2p_status', 'p2p_paste': 'p2p_paste', 'p2p_panel': 'p2p_panel', 'account_panel': 'account_panel'};

  window.ui = {
    init,
    set_button_text,
    disable_button,
    enable_button,
    enable,
    disable,
    hide,
    show_message,
    cvs,
    ctx,
    cvs_bounding_rect: null,
    ai_interval: null,
    ai: null
  };

}).call(this);

//# sourceMappingURL=ui.js.map
