// Generated by CoffeeScript 2.2.1
(function() {
  var init, on_challenge_accepted, on_challenge_clicked, on_challenge_failed, on_challenged, on_login_clicked, on_login_failed, on_login_succeeded, set_ui_state_after_challenge, set_ui_state_after_log_in, set_ui_state_before_challenge, set_ui_state_before_log_in, set_ui_state_challenging, set_ui_state_logging_in;

  init = function() {
    ui.login_button.onclick = on_login_clicked;
    return ui.challenge_button.onclick = on_challenge_clicked;
  };

  set_ui_state_logging_in = function() {
    ui.player_id.readOnly = true;
    ui.set_button_text(ui.login_button, 'logging in...');
    return ui.disable_button(ui.login_button);
  };

  set_ui_state_after_log_in = function() {
    ui.player_id.readOnly = true;
    ui.set_button_text(ui.login_button, 'logged in');
    return ui.enable_button(ui.challenge_button);
  };

  set_ui_state_before_log_in = function() {
    ui.player_id.readOnly = false;
    ui.set_button_text(ui.login_button, 'log in');
    return ui.enable_button(ui.login_button);
  };

  set_ui_state_challenging = function() {
    ui.opponent_id.readOnly = true;
    ui.set_button_text(ui.challenge_button, 'sending request...');
    return ui.disable_button(ui.challenge_button);
  };

  set_ui_state_after_challenge = function() {
    ui.opponent_id.readOnly = true;
    return ui.set_button_text(ui.challenge_button, 'challenge accepted');
  };

  set_ui_state_before_challenge = function() {
    ui.opponent_id.readOnly = false;
    ui.set_button_text(ui.challenge_button, 'challenge');
    return ui.enable_button(ui.challenge_button);
  };

  on_login_clicked = function() {
    var id;
    id = ui.player_id.value;
    if (!id) {
      return;
    }
    set_ui_state_logging_in();
    return network.login(id, on_login_succeeded, on_login_failed);
  };

  on_challenge_clicked = function() {
    var id;
    id = ui.opponent_id.value;
    if (!id) {
      return;
    }
    set_ui_state_challenging();
    return network.connect(id, on_challenge_accepted, on_challenge_failed);
  };

  on_login_succeeded = function() {
    set_ui_state_after_log_in();
    return network.wait(on_challenged);
  };

  on_login_failed = function() {
    set_ui_state_before_log_in();
    return ui.show_message('login failed');
  };

  on_challenge_accepted = function() {
    set_ui_state_after_challenge();
    game.stop();
    game.init_guest();
    return game.start();
  };

  on_challenge_failed = function() {
    set_ui_state_before_challenge();
    return ui.show_message('challenge failed');
  };

  on_challenged = function(challenger_id) {
    ui.opponent_id.readOnly = true;
    ui.opponent_id.value = challenger_id;
    ui.disable_button(ui.challenge_button);
    ui.set_button_text(ui.challenge_button, 'challenged you');
    game.stop();
    game.init_host();
    return game.start();
  };

  window.account = {init};

}).call(this);

//# sourceMappingURL=account.js.map
