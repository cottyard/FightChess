// Generated by CoffeeScript 1.8.0
(function() {
  var abort_preview, hovering_coord, init, last_mouse_position, launch_preview, on_drop, on_hover, on_mousedown, on_mousemove, on_mouseup, on_pick, paint_previewing_piece, preview, previewing, previewing_coord, previewing_piece, update_mouse_position, view_info, view_info_coord;

  previewing = false;

  previewing_piece = null;

  previewing_coord = [-1, -1];

  preview = function(gametick_evt) {
    var mo, moves, mr, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
    if (!board.chess_board.is_occupied(previewing_coord) || board.chess_board.get_piece(previewing_coord) !== previewing_piece) {
      abort_preview();
      return;
    }
    paint.mark_grid(ui.ctx["static"], previewing_coord);
    moves = previewing_piece.valid_moves();
    _ref = moves.regular;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      mr = _ref[_i];
      paint.mark_grid(ui.ctx["static"], mr, shape.style_green_tp);
    }
    _ref1 = moves.offensive;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      mo = _ref1[_j];
      paint.mark_grid(ui.ctx["static"], mo, shape.style_red_tp);
    }
    _ref2 = moves.defensive;
    _results = [];
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      mo = _ref2[_k];
      _results.push(paint.mark_grid(ui.ctx["static"], mo, shape.style_blue_tp));
    }
    return _results;
  };

  abort_preview = function() {
    ev.unhook('gametick', preview);
    ev.unhook('gametick', paint_previewing_piece);
    ev.unhook('mousemove', paint_previewing_piece);
    shape.clear_canvas(ui.ctx.animate);
    return previewing = false;
  };

  launch_preview = function() {
    ev.hook('gametick', preview);
    ev.hook('gametick', paint_previewing_piece);
    ev.hook('mousemove', paint_previewing_piece);
    return previewing = true;
  };

  last_mouse_position = null;

  update_mouse_position = function(evt) {
    return last_mouse_position = evt.pos;
  };

  paint_previewing_piece = function(evt) {
    shape.clear_canvas(ui.ctx.animate);
    shape.set_style(ui.ctx.animate, shape.style_tp);
    paint.piece_at(ui.ctx.animate, previewing_piece, last_mouse_position);
    return ui.cvs.animate.style.cursor = "pointer";
  };

  view_info_coord = [1, 1];

  view_info = function(evt) {
    if (board.chess_board.is_occupied(view_info_coord)) {
      return ui.textarea.value = board.chess_board.get_piece(view_info_coord).info();
    } else {
      return ui.textarea.value = '';
    }
  };

  on_pick = function(evt) {
    if (!board.chess_board.is_occupied(evt.coord)) {
      return;
    }
    previewing_piece = board.chess_board.get_piece(evt.coord);
    previewing_coord = evt.coord;
    return launch_preview();
  };

  on_drop = function(evt) {
    var moves;
    if (!previewing) {
      return;
    }
    moves = previewing_piece.valid_moves().regular;
    if (calc.coord_one_of(evt.coord, moves)) {
      ev.trigger('op_movepiece', {
        piece: previewing_piece,
        coord_to: evt.coord
      });
    }
    return abort_preview();
  };

  on_hover = function(evt) {
    view_info_coord = evt.coord;
    if (board.chess_board.is_occupied(evt.coord)) {
      return ui.cvs.animate.style.cursor = "pointer";
    } else {
      return ui.cvs.animate.style.cursor = "auto";
    }
  };

  on_mousedown = function(evt) {
    var coord;
    coord = calc.pos_to_coord(evt.pos);
    return ev.trigger('pick', {
      coord: coord
    });
  };

  on_mouseup = function(evt) {
    var coord;
    coord = calc.pos_to_coord(evt.pos);
    return ev.trigger('drop', {
      coord: coord
    });
  };

  hovering_coord = [-1, -1];

  on_mousemove = function(evt) {
    var coord;
    coord = calc.pos_to_coord(evt.pos);
    if (!calc.coord_equal(hovering_coord, coord)) {
      ev.trigger('hover', {
        coord: coord
      });
    }
    return hovering_coord = coord;
  };

  init = function() {
    ev.hook('mousedown', on_mousedown);
    ev.hook('mouseup', on_mouseup);
    ev.hook('mousemove', on_mousemove);
    ev.hook('mousemove', update_mouse_position);
    ev.hook('pick', on_pick);
    ev.hook('drop', on_drop);
    ev.hook('hover', on_hover);
    return ev.hook('gametick', view_info);
  };

  window.preview = {
    init: init
  };

}).call(this);
