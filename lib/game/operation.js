// Generated by CoffeeScript 2.2.1
(function() {
  var handle_cached_operations, handle_operation, init, is_valid_operation, on_game_operation, on_network_operation_in, operation_queue, send_cached_operations;

  operation_queue = [];

  handle_cached_operations = function(evt) {
    var results;
    results = [];
    while (operation_queue.length > 0) {
      results.push(handle_operation(evt.board, operation_queue.shift()));
    }
    return results;
  };

  send_cached_operations = function() {
    var i, len, op;
    for (i = 0, len = operation_queue.length; i < len; i++) {
      op = operation_queue[i];
      ev.trigger_now('network_out_operation', {
        operation: calc.to_string(op)
      });
    }
    return operation_queue = [];
  };

  is_valid_operation = function(board, op_evt) {
    var p;
    if (!board.is_occupied(op_evt.coord_from)) {
      return false;
    }
    p = board.get_piece(op_evt.coord_from);
    if (!p.equals(op_evt.piece)) {
      return false;
    }
    return calc.coord_one_of(op_evt.coord_to, board.get_valid_regular_moves(op_evt.coord_from));
  };

  handle_operation = function(board, op_evt) {
    var p;
    if (is_valid_operation(board, op_evt)) {
      p = board.get_piece(op_evt.coord_from);
      return ev.trigger('battle_move', {
        piece: p,
        coord_from: op_evt.coord_from,
        coord_to: op_evt.coord_to
      });
    }
  };

  on_network_operation_in = function(evt) {
    var op;
    op = calc.from_string(evt.operation);
    calc.set_type(op.piece, piece.Piece);
    return operation_queue.push(op);
  };

  on_game_operation = function(evt) {
    return operation_queue.push(evt);
  };

  init = function() {
    ev.hook('op_movepiece', on_game_operation);
    return ev.hook('network_in_operation', on_network_operation_in);
  };

  window.operation = {init, handle_cached_operations, send_cached_operations};

}).call(this);

//# sourceMappingURL=operation.js.map
