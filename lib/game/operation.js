// Generated by CoffeeScript 1.8.0
(function() {
  var handle_cached_operations, handle_operation, init, on_game_operation, on_network_operation_in, operation_queue, send_cached_operations;

  operation_queue = [];

  handle_cached_operations = function() {
    var _results;
    _results = [];
    while (operation_queue.length > 0) {
      _results.push(handle_operation(operation_queue.shift()));
    }
    return _results;
  };

  send_cached_operations = function() {
    var op, _i, _len;
    for (_i = 0, _len = operation_queue.length; _i < _len; _i++) {
      op = operation_queue[_i];
      ev.trigger_now('network_out_operation', {
        operation: calc.to_string(op)
      });
    }
    return operation_queue = [];
  };

  handle_operation = function(op_evt) {
    var local_piece, moves;
    if (!board.instance.is_occupied(op_evt.piece.coordinate)) {
      return;
    }
    local_piece = board.instance.get_piece(op_evt.piece.coordinate);
    if (!piece.piece_equal(local_piece, op_evt.piece)) {
      return;
    }
    moves = local_piece.valid_moves();
    if (calc.coord_one_of(op_evt.coord_to, moves.regular)) {
      return ev.trigger('battle_move', {
        piece: local_piece,
        coord_to: op_evt.coord_to
      });
    }
  };

  on_network_operation_in = function(evt) {
    var op;
    op = calc.from_string(evt.operation);
    calc.set_type(op.piece, piece.Piece);
    return operation_queue.push(op);
  };

  on_game_operation = function(evt) {
    return operation_queue.push(evt);
  };

  init = function() {
    ev.hook('op_movepiece', on_game_operation);
    return ev.hook('network_in_operation', on_network_operation_in);
  };

  window.operation = {
    init: init,
    handle_cached_operations: handle_cached_operations,
    send_cached_operations: send_cached_operations
  };

}).call(this);
