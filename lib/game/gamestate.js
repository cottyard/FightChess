// Generated by CoffeeScript 2.2.1
(function() {
  var cache_size, current_gamestate, end_game, get_gamestate, get_state, init, on_network_gamestate_in, send_current_state, send_game_end, set_state, start_game, state_queue, to_next_state;

  state_queue = [];

  current_gamestate = null;

  to_next_state = function() {
    var data;
    if (!state_queue.length > 0) {
      return false;
    }
    data = state_queue.shift();
    set_state(data.boardstate);
    if (data.gamestate.state === 'end' && gamestate.current_gamestate.state !== 'end') {
      ev.trigger_now('game_end', {
        result: data.gamestate.result,
        player: data.gamestate.player
      });
    }
    if (data.gamestate.state === 'ongoing' && gamestate.current_gamestate.state !== 'ongoing') {
      ev.trigger_now('game_start', {});
    }
    return true;
  };

  get_state = function() {
    return {
      battleground: battleground.get_state(),
      effect: effect.get_state()
    };
  };

  set_state = function(state) {
    battleground.set_state(state.battleground);
    return effect.set_state(state.effect);
  };

  on_network_gamestate_in = function(evt) {
    return state_queue.push(evt);
  };

  send_current_state = function() {
    var state;
    state = get_state();
    return ev.trigger_now('network_out_gamestate', {
      boardstate: state,
      gamestate: gamestate.current_gamestate
    });
  };

  send_game_end = function(evt) {
    return ev.trigger_now('network_out_gamestate', {});
  };

  cache_size = function() {
    return state_queue.length;
  };

  end_game = function(result, player) {
    var color;
    if (gamestate.current_gamestate.state !== 'ongoing') {
      return;
    }
    color = gamestate.current_gamestate.color;
    console.log(result);
    if (player != null) {
      console.log('by', player);
    }
    gamestate.current_gamestate = {
      state: 'end',
      result: result,
      player: player
    };
    switch (result) {
      case 'draw':
        ui.gamestat.value = 'draw!';
        break;
      case 'win':
        if (player === color) {
          ui.gamestat.value = 'you are victorious!';
        } else {
          ui.gamestat.value = 'you are defeated';
        }
        break;
      default:
        ui.gamestat.value = 'game ended with unknown status';
    }
    return ui.set_button_text(ui.startgame, "start game");
  };

  start_game = function(color) {
    console.log(`starting with ${color}`);
    gamestate.current_gamestate = {
      state: 'ongoing',
      color: color
    };
    ui.gamestat.value = `playing ${color}`;
    return ui.set_button_text(ui.startgame, "restart game");
  };

  get_gamestate = function() {
    if (gamestate.current_gamestate != null) {
      return gamestate.current_gamestate.state;
    }
    return null;
  };

  init = function() {
    ev.hook('network_in_gamestate', on_network_gamestate_in);
    ui.gamestat.value = "waiting for start";
    gamestate.current_gamestate = {
      state: 'ready'
    };
    return ui.set_button_text(ui.startgame, "start game");
  };

  window.gamestate = {
    init,
    current: get_gamestate,
    get_state,
    set_state,
    to_next_state,
    cache_size,
    send_current_state,
    start_game,
    end_game
  };

}).call(this);

//# sourceMappingURL=gamestate.js.map
