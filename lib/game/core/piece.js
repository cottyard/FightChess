// Generated by CoffeeScript 2.2.1
(function() {
  var Piece, deserialize, serialization_attributes, serialize;

  Piece = class Piece {
    constructor(color1, type1) {
      this.color = color1;
      this.type = type1;
      this.retrieve_basic_info();
      this.initialize_state_info();
    }

    retrieve_basic_info() {
      var ability;
      ability = rule.ability[this.type];
      this.attack = ability['atk'];
      this.attack_cd = ability['atk_cd'];
      this.assistance = ability['ast'];
      this.hp_total = ability['hp'];
      this.shield_total_born = ability['shield'];
      this.shield_heal_born = ability['shield_heal'];
      this.move_cd = ability['move_cd'];
      this.heal = ability['heal'];
      return this.hp_heal_born = ability['self_heal'];
    }

    initialize_state_info() {
      this.hp = this.hp_total;
      this.hp_heal = this.hp_heal_born;
      this.shield = this.shield_total = this.shield_total_born;
      this.shield_heal = this.shield_heal_born;
      this.attack_cd_ticks = 0;
      return this.move_cd_ticks = 0;
    }

    info() {
      return `hp: ${Math.ceil(this.hp)}/${this.hp_total} (+${(this.hp_heal * 10).toFixed(0)})\nshield: ${Math.floor(this.shield)}/${this.shield_total} (+${(this.shield_heal * 10).toFixed(0)})`;
    }

    inflict(damage) {
      if (this.shield >= damage) {
        this.shield -= damage;
        return false;
      } else {
        damage -= this.shield;
        this.shield = 0;
        this.hp -= damage;
        return true;
      }
    }

    assist(assistance, heal) {
      this.shield_total += assistance[0];
      this.shield_heal += assistance[1];
      return this.hp_heal += heal;
    }

    activate_attack_cd() {
      return this.attack_cd_ticks = this.attack_cd;
    }

    reduce_attack_cd() {
      if (this.attack_cd_ticks > 0) {
        return this.attack_cd_ticks--;
      }
    }

    adjust_shield() {
      if (this.shield > this.shield_total) {
        return this.shield = this.shield_total;
      }
    }

    recover_shield() {
      this.shield += this.shield_heal;
      return this.adjust_shield();
    }

    recover_hp() {
      this.hp += this.hp_heal;
      return this.adjust_hp();
    }

    adjust_hp() {
      if (this.hp > this.hp_total) {
        return this.hp = this.hp_total;
      }
    }

    reset_assisted_abilities() {
      this.shield_total = this.shield_total_born;
      this.shield_heal = this.shield_heal_born;
      return this.hp_heal = this.hp_heal_born;
    }

    activate_move_cd() {
      return this.move_cd_ticks = this.move_cd;
    }

    reduce_move_cd() {
      if (this.move_cd_ticks > 0) {
        return this.move_cd_ticks--;
      }
    }

    can_move() {
      return true;
      return this.move_cd_ticks === 0;
    }

    is_dead() {
      return this.hp <= 0;
    }

    clone() {
      var p;
      p = new Piece(this.color, this.type);
      p.hp = this.hp;
      p.shield = this.shield;
      p.shield_total = this.shield_total;
      p.shield_heal = this.shield_heal;
      p.attack_cd_ticks = this.attack_cd_ticks;
      p.move_cd_ticks = this.move_cd_ticks;
      return p;
    }

    equals(another) {
      return this.type === another.type && this.color === another.color;
    }

    change_type(type) {
      this.type = type;
      this.retrieve_basic_info();
      return this.initialize_state_info();
    }

  };

  serialization_attributes = ['color', 'type', 'hp', 'hp_heal', 'sd', 'sd_total', 'sd_heal', 'atk_cd', 'mv_cd', 'coord_x', 'coord_y'];

  serialize = function(piece, [coord_x, coord_y]) {
    var a, piece_obj;
    piece_obj = {
      color: piece.color === 'white' ? 0 : 1,
      type: ((function() {
        var results;
        results = [];
        for (a in rule.ability) {
          results.push(a);
        }
        return results;
      })()).indexOf(piece.type),
      hp: calc.wrap_float_for_arraybuffer(piece.hp),
      hp_heal: calc.wrap_float_for_arraybuffer(piece.hp_heal),
      sd: calc.wrap_float_for_arraybuffer(piece.shield),
      sd_total: calc.wrap_float_for_arraybuffer(piece.shield_total),
      sd_heal: calc.wrap_float_for_arraybuffer(piece.shield_heal),
      atk_cd: piece.attack_cd_ticks,
      mv_cd: piece.move_cd_ticks,
      coord_x: coord_x,
      coord_y: coord_y
    };
    return calc.obj_to_arraybuffer(piece_obj);
  };

  deserialize = function(buffer) {
    var a, color, coord_x, coord_y, i, len, piece, piece_obj, type;
    piece_obj = {};
    for (i = 0, len = serialization_attributes.length; i < len; i++) {
      a = serialization_attributes[i];
      piece_obj[a] = null;
    }
    calc.arraybuffer_to_obj(buffer, piece_obj);
    color = piece_obj.color === 0 ? 'white' : 'black';
    type = ((function() {
      var results;
      results = [];
      for (a in rule.ability) {
        results.push(a);
      }
      return results;
    })())[piece_obj.type];
    piece = new Piece(color, type);
    piece.hp = calc.unwrap_float_from_arraybuffer(piece_obj.hp);
    piece.hp_heal = calc.unwrap_float_from_arraybuffer(piece_obj.hp_heal);
    piece.shield = calc.unwrap_float_from_arraybuffer(piece_obj.sd);
    piece.shield_total = calc.unwrap_float_from_arraybuffer(piece_obj.sd_total);
    piece.shield_heal = calc.unwrap_float_from_arraybuffer(piece_obj.sd_heal);
    piece.attack_cd_ticks = piece_obj.atk_cd;
    piece.move_cd_ticks = piece_obj.mv_cd;
    coord_x = piece_obj.coord_x;
    coord_y = piece_obj.coord_y;
    return [piece, [coord_x, coord_y]];
  };

  window.piece = {
    Piece,
    serialize,
    deserialize,
    serialization_attributes,
    serialization_size: serialization_attributes.length * 2
  };

}).call(this);

//# sourceMappingURL=piece.js.map
