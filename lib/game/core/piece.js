// Generated by CoffeeScript 2.2.1
(function() {
  var Piece, byte_spec, deserialize_piece, serialization_btyes, serialize_piece;

  Piece = class Piece {
    constructor(color1, type1) {
      this.color = color1;
      this.type = type1;
      this.retrieve_basic_info();
      this.initialize_state_info();
    }

    retrieve_basic_info() {
      var ability;
      ability = rule.ability[this.type];
      this.attack = ability['atk'];
      this.attack_cd = ability['atk_cd'];
      this.assistance = ability['ast'];
      this.hp_total = ability['hp'];
      this.shield_total_born = ability['shield'];
      this.shield_heal_born = ability['shield_heal'];
      return this.move_cd = ability['move_cd'];
    }

    initialize_state_info() {
      this.hp = this.hp_total;
      this.shield = this.shield_total = this.shield_total_born;
      this.shield_heal = this.shield_heal_born;
      this.attack_cd_ticks = 0;
      return this.move_cd_ticks = 0;
    }

    info() {
      return `hp: ${Math.ceil(this.hp)}/${this.hp_total}\nshield: ${Math.floor(this.shield)}/${this.shield_total} (${this.shield_heal.toFixed(1)})`;
    }

    inflict(damage) {
      if (this.shield >= damage) {
        this.shield -= damage;
        return false;
      } else {
        damage -= this.shield;
        this.shield = 0;
        this.hp -= damage;
        return true;
      }
    }

    assist(assistance) {
      this.shield_total += assistance[0];
      return this.shield_heal += assistance[1];
    }

    activate_attack_cd() {
      return this.attack_cd_ticks = this.attack_cd;
    }

    reduce_attack_cd() {
      if (this.attack_cd_ticks > 0) {
        return this.attack_cd_ticks--;
      }
    }

    adjust_shield() {
      if (this.shield > this.shield_total) {
        return this.shield = this.shield_total;
      }
    }

    recover_shield() {
      this.shield += this.shield_heal;
      return this.adjust_shield();
    }

    activate_move_cd() {
      return this.move_cd_ticks = this.move_cd;
    }

    reduce_move_cd() {
      if (this.move_cd_ticks > 0) {
        return this.move_cd_ticks--;
      }
    }

    heal(hp) {
      this.hp += hp;
      if (this.hp > this.hp_total) {
        return this.hp = this.hp_total;
      }
    }

    can_move() {
      return this.move_cd_ticks === 0;
    }

    is_dead() {
      return this.hp <= 0;
    }

    clone() {
      return new Piece(this.color, this.type);
    }

    equals(another) {
      return this.type === another.type && this.color === another.color;
    }

    change_type(type) {
      this.type = type;
      this.retrieve_basic_info();
      return this.initialize_state_info();
    }

  };

  byte_spec = {
    color: 1,
    type: 1,
    hp: 2,
    sd: 2,
    sd_total: 2,
    sd_heal: 1,
    atk_cd: 1,
    mv_cd: 1
  };

  serialization_btyes = 11;

  serialize_piece = function(piece) {
    var a, piece_obj;
    piece_obj = {
      color: piece.color === 'white' ? 0 : 1,
      type: ((function() {
        var results;
        results = [];
        for (a in rule.ability) {
          results.push(a);
        }
        return results;
      })()).indexOf(piece.type),
      hp: calc.wrap_float_for_arraybuffer(piece.hp),
      sd: calc.wrap_float_for_arraybuffer(piece.shield),
      sd_total: calc.wrap_float_for_arraybuffer(piece.shield_total),
      sd_heal: calc.wrap_float_for_arraybuffer(piece.shield_heal),
      atk_cd: piece.attack_cd_ticks,
      mv_cd: piece.move_cd_ticks
    };
    return calc.obj_to_arraybuffer(piece_obj, byte_spec);
  };

  deserialize_piece = function(buffer) {
    var a, color, piece, piece_obj, type;
    piece_obj = calc.arraybuffer_to_obj(buffer, byte_spec);
    color = piece_obj.color === 0 ? 'white' : 'black';
    type = ((function() {
      var results;
      results = [];
      for (a in rule.ability) {
        results.push(a);
      }
      return results;
    })())[piece_obj.type];
    piece = new Piece(color, type);
    piece.hp = calc.unwrap_float_from_arraybuffer(piece_obj.hp);
    piece.shield = calc.unwrap_float_from_arraybuffer(piece_obj.sd);
    piece.shield_total = calc.unwrap_float_from_arraybuffer(piece_obj.sd_total);
    piece.shield_heal = calc.unwrap_float_from_arraybuffer(piece_obj.sd_heal);
    piece.attack_cd_ticks = piece_obj.atk_cd;
    piece.move_cd_ticks = piece_obj.mv_cd;
    return piece;
  };

  window.piece = {Piece, serialize_piece, deserialize_piece, serialization_btyes};

}).call(this);

//# sourceMappingURL=piece.js.map
