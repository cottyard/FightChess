// Generated by CoffeeScript 2.2.1
(function() {
  var Piece, byte_spec, deserialize_piece, equal, serialization_btyes, serialize_piece;

  Piece = (function() {
    var transform_column;

    class Piece {
      constructor(color1, type1, coordinate, board1) {
        this.on_assist_round_begin = this.on_assist_round_begin.bind(this);
        this.on_assist_round_end = this.on_assist_round_end.bind(this);
        this.on_attack_round_begin = this.on_attack_round_begin.bind(this);
        this.on_attack_round_end = this.on_attack_round_end.bind(this);
        this.on_recover_round = this.on_recover_round.bind(this);
        this.color = color1;
        this.type = type1;
        this.coordinate = coordinate;
        this.board = board1;
        this.retrieve_basic_info();
        this.initialize_state_info();
        if (this.board.is_battleground) {
          this.hook_actions();
        }
      }

      retrieve_basic_info() {
        var ability;
        ability = rule.ability[this.type];
        this.attack = ability['atk'];
        this.attack_cd = ability['atk_cd'];
        this.assistance = ability['ast'];
        this.hp_total = ability['hp'];
        this.shield_total_born = ability['shield'];
        this.shield_heal_born = ability['shield_heal'];
        return this.move_cd = ability['move_cd'];
      }

      initialize_state_info() {
        this.hp = this.hp_total;
        this.shield = this.shield_total = this.shield_total_born;
        this.shield_heal = this.shield_heal_born;
        this.attack_cd_ticks = 0;
        return this.move_cd_ticks = 0;
      }

      move_to(new_coord) {
        if (this.is_onboard()) {
          board.instance.lift_piece(this.coordinate);
        }
        this.coordinate = new_coord;
        board.instance.place_piece(this);
        this.move_cd_ticks = this.move_cd;
        if (this.type === 'pawn') {
          this.try_promoting();
        }
        if (this.type === 'super_pawn') {
          return this.try_transforming();
        }
      }

      can_move() {
        return this.move_cd_ticks === 0;
      }

      try_promoting(coord) {
        if ((this.color === 'white' && this.coordinate[1] === 1) || (this.color === 'black' && this.coordinate[1] === 8)) {
          this.type = 'super_pawn';
          this.retrieve_basic_info();
          this.initialize_state_info();
          return this.move_cd_ticks = this.move_cd;
        }
      }

      try_transforming(coord) {
        if ((this.color === 'white' && this.coordinate[1] === 8) || (this.color === 'black' && this.coordinate[1] === 1)) {
          this.type = transform_column[this.coordinate[0] - 1];
          this.retrieve_basic_info();
          this.initialize_state_info();
          return this.move_cd_ticks = this.move_cd;
        }
      }

      valid_moves(board_instance = board.instance) {
        return rule.move.strategies[this.type](this.color, this.coordinate, board_instance);
      }

      is_onboard() {
        return this.coordinate != null;
      }

      on_assist_round_begin() {
        var astee, coord, i, len, ref, results;
        this.shield_total = this.shield_total_born;
        this.shield_heal = this.shield_heal_born;
        ref = this.valid_moves().defensive;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          coord = ref[i];
          astee = board.instance.get_piece(coord);
          results.push(ev.trigger('battle_assist', {
            aster: this,
            astee: astee,
            coord_from: this.coordinate,
            coord_to: coord,
            enhancement: this.assistance
          }));
        }
        return results;
      }

      on_assist_round_end() {
        if (this.shield > this.shield_total) {
          return this.shield = this.shield_total;
        }
      }

      on_attack_round_begin() {
        var coord, i, len, ref, target;
        if (this.attack_cd_ticks > 0 || this.valid_moves().offensive.length === 0) {
          return;
        }
        ref = this.valid_moves().offensive;
        for (i = 0, len = ref.length; i < len; i++) {
          coord = ref[i];
          target = board.instance.get_piece(coord);
          ev.trigger('battle_attack', {
            atker: this,
            atkee: target,
            coord_from: this.coordinate,
            coord_to: coord,
            damage: calc.randint(this.attack)
          });
        }
        return this.attack_cd_ticks = this.attack_cd;
      }

      on_attack_round_end() {
        if (this.attack_cd_ticks > 0) {
          return this.attack_cd_ticks--;
        }
      }

      on_recover_round() {
        this.shield += this.shield_heal;
        if (this.shield > this.shield_total) {
          this.shield = this.shield_total;
        }
        if (this.move_cd_ticks > 0) {
          return this.move_cd_ticks--;
        }
      }

      inflict(damage) {
        if (!this.is_onboard()) {
          return;
        }
        if (this.shield >= damage) {
          this.shield -= damage;
        } else {
          damage -= this.shield;
          this.shield = 0;
          this.hp -= damage;
          ev.trigger('piece_hurt', {
            piece: this,
            coord: this.coordinate
          });
        }
        if (this.hp <= 0) {
          return this.die();
        }
      }

      enhance(assistance) {
        this.shield_total += assistance[0];
        return this.shield_heal += assistance[1];
      }

      recover(hp) {}

      hook_actions() {
        ev.hook('assist_round_begin', this.on_assist_round_begin);
        ev.hook('assist_round_end', this.on_assist_round_end);
        ev.hook('attack_round_begin', this.on_attack_round_begin);
        ev.hook('attack_round_end', this.on_attack_round_end);
        return ev.hook('recover_round', this.on_recover_round);
      }

      unhook_actions() {
        ev.unhook('assist_round_begin', this.on_assist_round_begin);
        ev.unhook('assist_round_end', this.on_assist_round_end);
        ev.unhook('attack_round_begin', this.on_attack_round_begin);
        ev.unhook('attack_round_end', this.on_attack_round_end);
        return ev.unhook('recover_round', this.on_recover_round);
      }

      die() {
        if (!this.is_onboard()) {
          return;
        }
        board.instance.lift_piece(this.coordinate);
        this.coordinate = null;
        this.unhook_actions();
        return ev.trigger('piece_die', {
          piece: this,
          coord: this.coordinate
        });
      }

      clone(board) {
        return new Piece(this.color, this.type, this.coordinate, board);
      }

      info() {
        return `hp: ${Math.ceil(this.hp)}/${this.hp_total}\nshield: ${Math.floor(this.shield)}/${this.shield_total} (${this.shield_heal.toFixed(1)})`;
      }

    };

    transform_column = ['rook', 'knight', 'bishop', 'queen', 'queen', 'bishop', 'knight', 'rook'];

    return Piece;

  }).call(this);

  equal = function(piece_1, piece_2) {
    return piece_1.type === piece_2.type && piece_1.color === piece_2.color;
  };

  byte_spec = {
    color: 1,
    type: 1,
    coord_x: 1,
    coord_y: 1,
    hp: 2,
    sd: 2,
    sd_total: 2,
    sd_heal: 1,
    atk_cd: 1,
    mv_cd: 1
  };

  serialization_btyes = 13;

  serialize_piece = function(piece) {
    var a, piece_obj;
    piece_obj = {
      color: piece.color === 'white' ? 0 : 1,
      type: ((function() {
        var results;
        results = [];
        for (a in rule.ability) {
          results.push(a);
        }
        return results;
      })()).indexOf(piece.type),
      coord_x: piece.coordinate[0],
      coord_y: piece.coordinate[1],
      hp: calc.wrap_float_for_arraybuffer(piece.hp),
      sd: calc.wrap_float_for_arraybuffer(piece.shield),
      sd_total: calc.wrap_float_for_arraybuffer(piece.shield_total),
      sd_heal: calc.wrap_float_for_arraybuffer(piece.shield_heal),
      atk_cd: piece.attack_cd_ticks,
      mv_cd: piece.move_cd_ticks
    };
    return calc.obj_to_arraybuffer(piece_obj, byte_spec);
  };

  deserialize_piece = function(buffer) {
    var a, color, coord, piece, piece_obj, type;
    piece_obj = calc.arraybuffer_to_obj(buffer, byte_spec);
    color = piece_obj.color === 0 ? 'white' : 'black';
    type = ((function() {
      var results;
      results = [];
      for (a in rule.ability) {
        results.push(a);
      }
      return results;
    })())[piece_obj.type];
    coord = [piece_obj.coord_x, piece_obj.coord_y];
    piece = new Piece(color, type, coord);
    piece.hp = calc.unwrap_float_from_arraybuffer(piece_obj.hp);
    piece.shield = calc.unwrap_float_from_arraybuffer(piece_obj.sd);
    piece.shield_total = calc.unwrap_float_from_arraybuffer(piece_obj.sd_total);
    piece.shield_heal = calc.unwrap_float_from_arraybuffer(piece_obj.sd_heal);
    piece.attack_cd_ticks = piece_obj.atk_cd;
    piece.move_cd_ticks = piece_obj.mv_cd;
    return piece;
  };

  window.piece = {Piece, equal, serialize_piece, deserialize_piece, serialization_btyes};

}).call(this);
