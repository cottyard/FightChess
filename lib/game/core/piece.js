// Generated by CoffeeScript 1.8.0
(function() {
  var Piece, byte_spec, deserialize_piece, piece_equal, serialization_btyes, serialize_piece,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Piece = (function() {
    var transform_column;

    function Piece(color, type, coordinate) {
      this.color = color;
      this.type = type;
      this.coordinate = coordinate;
      this.on_recover_round = __bind(this.on_recover_round, this);
      this.on_attack_round_end = __bind(this.on_attack_round_end, this);
      this.on_attack_round_begin = __bind(this.on_attack_round_begin, this);
      this.on_assist_round_end = __bind(this.on_assist_round_end, this);
      this.on_assist_round_begin = __bind(this.on_assist_round_begin, this);
      this.retrieve_basic_info();
      this.initialize_state_info();
      this.hook_actions();
    }

    Piece.prototype.retrieve_basic_info = function() {
      var ability;
      ability = rule.ability[this.type];
      this.attack = ability['atk'];
      this.attack_cd = ability['atk_cd'];
      this.assistance = ability['ast'];
      this.hp_total = ability['hp'];
      this.shield_total_born = ability['shield'];
      this.shield_heal_born = ability['shield_heal'];
      return this.move_cd = ability['move_cd'];
    };

    Piece.prototype.initialize_state_info = function() {
      this.hp = this.hp_total;
      this.shield = this.shield_total = this.shield_total_born;
      this.shield_heal = this.shield_heal_born;
      this.attack_cd_ticks = 0;
      return this.move_cd_ticks = 0;
    };

    Piece.prototype.move_to = function(new_coord) {
      if (this.is_onboard()) {
        board.instance.lift_piece(this.coordinate);
      }
      this.coordinate = new_coord;
      board.instance.place_piece(this);
      this.move_cd_ticks = this.move_cd;
      if (this.type === 'pawn') {
        this.try_promoting();
      }
      if (this.type === 'super_pawn') {
        return this.try_transforming();
      }
    };

    Piece.prototype.can_move = function() {
      return this.move_cd_ticks === 0;
    };

    Piece.prototype.try_promoting = function(coord) {
      if ((this.color === 'white' && this.coordinate[1] === 1) || (this.color === 'black' && this.coordinate[1] === 8)) {
        this.type = 'super_pawn';
        this.retrieve_basic_info();
        this.initialize_state_info();
        return this.move_cd_ticks = this.move_cd;
      }
    };

    transform_column = ['rook', 'knight', 'bishop', 'queen', 'queen', 'bishop', 'knight', 'rook'];

    Piece.prototype.try_transforming = function(coord) {
      if ((this.color === 'white' && this.coordinate[1] === 8) || (this.color === 'black' && this.coordinate[1] === 1)) {
        this.type = transform_column[this.coordinate[0] - 1];
        this.retrieve_basic_info();
        this.initialize_state_info();
        return this.move_cd_ticks = this.move_cd;
      }
    };

    Piece.prototype.valid_moves = function() {
      return rule.move.strategies[this.type](this.color, this.coordinate, board.instance);
    };

    Piece.prototype.is_onboard = function() {
      return this.coordinate != null;
    };

    Piece.prototype.on_assist_round_begin = function() {
      var astee, coord, _i, _len, _ref, _results;
      this.shield_total = this.shield_total_born;
      this.shield_heal = this.shield_heal_born;
      _ref = this.valid_moves().defensive;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        coord = _ref[_i];
        astee = board.instance.get_piece(coord);
        _results.push(ev.trigger('battle_assist', {
          aster: this,
          astee: astee,
          coord_from: this.coordinate,
          coord_to: coord,
          enhancement: this.assistance
        }));
      }
      return _results;
    };

    Piece.prototype.on_assist_round_end = function() {
      if (this.shield > this.shield_total) {
        return this.shield = this.shield_total;
      }
    };

    Piece.prototype.on_attack_round_begin = function() {
      var coord, target, _i, _len, _ref;
      if (this.attack_cd_ticks > 0 || this.valid_moves().offensive.length === 0) {
        return;
      }
      _ref = this.valid_moves().offensive;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        coord = _ref[_i];
        target = board.instance.get_piece(coord);
        ev.trigger('battle_attack', {
          atker: this,
          atkee: target,
          coord_from: this.coordinate,
          coord_to: coord,
          damage: calc.randint(this.attack)
        });
      }
      return this.attack_cd_ticks = this.attack_cd;
    };

    Piece.prototype.on_attack_round_end = function() {
      if (this.attack_cd_ticks > 0) {
        return this.attack_cd_ticks--;
      }
    };

    Piece.prototype.on_recover_round = function() {
      this.shield += this.shield_heal;
      if (this.shield > this.shield_total) {
        this.shield = this.shield_total;
      }
      if (this.move_cd_ticks > 0) {
        return this.move_cd_ticks--;
      }
    };

    Piece.prototype.inflict = function(damage) {
      if (!this.is_onboard()) {
        return;
      }
      if (this.shield >= damage) {
        this.shield -= damage;
      } else {
        damage -= this.shield;
        this.shield = 0;
        this.hp -= damage;
        ev.trigger('piece_hurt', {
          piece: this,
          coord: this.coordinate
        });
      }
      if (this.hp <= 0) {
        return this.die();
      }
    };

    Piece.prototype.enhance = function(assistance) {
      this.shield_total += assistance[0];
      return this.shield_heal += assistance[1];
    };

    Piece.prototype.recover = function(hp) {};

    Piece.prototype.hook_actions = function() {
      ev.hook('assist_round_begin', this.on_assist_round_begin);
      ev.hook('assist_round_end', this.on_assist_round_end);
      ev.hook('attack_round_begin', this.on_attack_round_begin);
      ev.hook('attack_round_end', this.on_attack_round_end);
      return ev.hook('recover_round', this.on_recover_round);
    };

    Piece.prototype.unhook_actions = function() {
      ev.unhook('assist_round_begin', this.on_assist_round_begin);
      ev.unhook('assist_round_end', this.on_assist_round_end);
      ev.unhook('attack_round_begin', this.on_attack_round_begin);
      ev.unhook('attack_round_end', this.on_attack_round_end);
      return ev.unhook('recover_round', this.on_recover_round);
    };

    Piece.prototype.die = function() {
      if (!this.is_onboard()) {
        return;
      }
      board.instance.lift_piece(this.coordinate);
      this.coordinate = null;
      this.unhook_actions();
      return ev.trigger('piece_die', {
        piece: this,
        coord: this.coordinate
      });
    };

    Piece.prototype.info = function() {
      return "hp: " + (Math.ceil(this.hp)) + "/" + this.hp_total + "\nshield: " + (Math.floor(this.shield)) + "/" + this.shield_total + " (" + this.shield_heal + ")";
    };

    return Piece;

  })();

  piece_equal = function(piece_1, piece_2) {
    return piece_1.type === piece_2.type && piece_1.color === piece_2.color;
  };

  byte_spec = {
    color: 1,
    type: 1,
    coord_x: 1,
    coord_y: 1,
    hp: 2,
    sd: 2,
    sd_total: 2,
    sd_heal: 1,
    atk_cd: 1,
    mv_cd: 1
  };

  serialization_btyes = 13;

  serialize_piece = function(piece) {
    var a, piece_obj;
    piece_obj = {
      color: piece.color === 'white' ? 0 : 1,
      type: ((function() {
        var _results;
        _results = [];
        for (a in rule.ability) {
          _results.push(a);
        }
        return _results;
      })()).indexOf(piece.type),
      coord_x: piece.coordinate[0],
      coord_y: piece.coordinate[1],
      hp: piece.hp,
      sd: Math.floor(piece.shield * 10),
      sd_total: Math.floor(piece.shield_total * 10),
      sd_heal: Math.floor(piece.shield_heal * 10),
      atk_cd: piece.attack_cd_ticks,
      mv_cd: piece.move_cd_ticks
    };
    return calc.obj_to_arraybuffer(piece_obj, byte_spec);
  };

  deserialize_piece = function(buffer) {
    var a, color, coord, piece, piece_obj, type;
    piece_obj = calc.arraybuffer_to_obj(buffer, byte_spec);
    color = piece_obj.color === 0 ? 'white' : 'black';
    type = ((function() {
      var _results;
      _results = [];
      for (a in rule.ability) {
        _results.push(a);
      }
      return _results;
    })())[piece_obj.type];
    coord = [piece_obj.coord_x, piece_obj.coord_y];
    piece = new Piece(color, type, coord);
    piece.hp = piece_obj.hp;
    piece.shield = piece_obj.sd / 10;
    piece.shield_total = piece_obj.sd_total / 10;
    piece.shield_heal = piece_obj.sd_heal / 10;
    piece.attack_cd_ticks = piece_obj.atk_cd;
    piece.move_cd_ticks = piece_obj.mv_cd;
    return piece;
  };

  window.piece = {
    Piece: Piece,
    piece_equal: piece_equal,
    serialize_piece: serialize_piece,
    deserialize_piece: deserialize_piece,
    serialization_btyes: serialization_btyes
  };

}).call(this);
