// Generated by CoffeeScript 2.2.1
(function() {
  var Board, transform_column;

  Board = (function() {
    var king_spawn_coord, spawn_row;

    class Board {
      constructor(is_battleground) {
        var i, j;
        this.on_assist_round_begin = this.on_assist_round_begin.bind(this);
        this.on_assist_round_end = this.on_assist_round_end.bind(this);
        this.on_attack_round_begin = this.on_attack_round_begin.bind(this);
        this.on_attack_round_end = this.on_attack_round_end.bind(this);
        this.on_recover_round = this.on_recover_round.bind(this);
        this.is_battleground = is_battleground;
        this.board = (function() {
          var k, results;
          results = [];
          for (i = k = 1; k <= 8; i = ++k) {
            results.push((function() {
              var l, results1;
              results1 = [];
              for (j = l = 1; l <= 8; j = ++l) {
                results1.push(null);
              }
              return results1;
            })());
          }
          return results;
        })();
        if (this.is_battle_board == null) {
          this.is_battle_board = false;
        }
        if (this.is_battleground) {
          this.hook;
        }
      }

      set_out_board() {
        var b, w;
        w = 'white';
        b = 'black';
        this.place_piece(new piece.Piece(w, 'king', king_spawn_coord[w], this));
        this.place_piece(new piece.Piece(b, 'king', king_spawn_coord[b], this));
        this.spawn(w);
        this.spawn(w);
        this.spawn(w);
        this.spawn(b);
        this.spawn(b);
        return this.spawn(b);
      }

      clean_up_board() {
        var i, j, k, results;
        results = [];
        for (i = k = 1; k <= 8; i = ++k) {
          results.push((function() {
            var l, results1;
            results1 = [];
            for (j = l = 1; l <= 8; j = ++l) {
              if (this.is_occupied([i, j])) {
                this.get_piece([i, j]);
                results1.push(this.lift_piece([i, j]));
              } else {
                results1.push(void 0);
              }
            }
            return results1;
          }).call(this));
        }
        return results;
      }

      get_piece([coord_x, coord_y]) {
        return this.board[coord_x - 1][coord_y - 1];
      }

      lift_piece([coord_x, coord_y]) {
        return this.board[coord_x - 1][coord_y - 1] = null;
      }

      place_piece(piece, [coord_x, coord_y]) {
        return this.board[coord_x - 1][coord_y - 1] = piece;
      }

      is_occupied([coord_x, coord_y]) {
        return this.board[coord_x - 1][coord_y - 1] != null;
      }

      spawn(color) {
        return this.place_piece(new piece.Piece(color, 'pawn', [calc.randint([1, 8]), spawn_row[color]]));
      }

      is_battleground() {
        return this.is_battleground;
      }

      clone() {
        var brd, i, j, k, l;
        brd = new Board();
        for (i = k = 1; k <= 8; i = ++k) {
          for (j = l = 1; l <= 8; j = ++l) {
            if (this.is_occupied([i, j])) {
              brd.place_piece((this.get_piece([i, j])).clone());
            }
          }
        }
        return brd;
      }

      static hook() {
        ev.hook('assist_round_begin', this.on_assist_round_begin);
        ev.hook('assist_round_end', this.on_assist_round_end);
        ev.hook('attack_round_begin', this.on_attack_round_begin);
        ev.hook('attack_round_end', this.on_attack_round_end);
        return ev.hook('recover_round', this.on_recover_round);
      }

      static unhook() {
        ev.unhook('assist_round_begin', this.on_assist_round_begin);
        ev.unhook('assist_round_end', this.on_assist_round_end);
        ev.unhook('attack_round_begin', this.on_attack_round_begin);
        ev.unhook('attack_round_end', this.on_attack_round_end);
        return ev.unhook('recover_round', this.on_recover_round);
      }

      on_assist_round_begin() {
        var astee, coord, k, len, ref, results;
        this.shield_total = this.shield_total_born;
        this.shield_heal = this.shield_heal_born;
        ref = this.valid_moves().defensive;
        results = [];
        for (k = 0, len = ref.length; k < len; k++) {
          coord = ref[k];
          astee = board.instance.get_piece(coord);
          results.push(ev.trigger('battle_assist', {
            aster: this,
            astee: astee,
            coord_from: this.coordinate,
            coord_to: coord,
            enhancement: this.assistance
          }));
        }
        return results;
      }

      on_assist_round_end() {
        if (this.shield > this.shield_total) {
          return this.shield = this.shield_total;
        }
      }

      on_attack_round_begin() {
        var coord, k, len, ref, target;
        if (this.attack_cd_ticks > 0 || this.valid_moves().offensive.length === 0) {
          return;
        }
        ref = this.valid_moves().offensive;
        for (k = 0, len = ref.length; k < len; k++) {
          coord = ref[k];
          target = board.instance.get_piece(coord);
          ev.trigger('battle_attack', {
            atker: this,
            atkee: target,
            coord_from: this.coordinate,
            coord_to: coord,
            damage: calc.randint(this.attack)
          });
        }
        return this.attack_cd_ticks = this.attack_cd;
      }

      on_attack_round_end() {
        if (this.attack_cd_ticks > 0) {
          return this.attack_cd_ticks--;
        }
      }

      on_recover_round() {
        this.shield += this.shield_heal;
        if (this.shield > this.shield_total) {
          this.shield = this.shield_total;
        }
        if (this.move_cd_ticks > 0) {
          return this.move_cd_ticks--;
        }
      }

    };

    spawn_row = {
      white: 7,
      black: 2
    };

    king_spawn_coord = {
      white: [5, 8],
      black: [5, 1]
    };

    return Board;

  }).call(this);

  ({
    //#################################################

    // ev.trigger 'piece_hurt', {
    //   piece: @, 
    //   coord: @coordinate
    // }
    move_to: function(new_coord) {
      if (this.is_onboard()) {
        board.instance.lift_piece(this.coordinate);
      }
      this.coordinate = new_coord;
      board.instance.place_piece(this);
      this.move_cd_ticks = this.move_cd;
      if (this.type === 'pawn') {
        this.try_promoting();
      }
      if (this.type === 'super_pawn') {
        return this.try_transforming();
      }
    },
    can_move: function() {
      return this.move_cd_ticks === 0;
    },
    try_promoting: function(coord) {
      if ((this.color === 'white' && this.coordinate[1] === 1) || (this.color === 'black' && this.coordinate[1] === 8)) {
        this.type = 'super_pawn';
        this.retrieve_basic_info();
        this.initialize_state_info();
        return this.move_cd_ticks = this.move_cd;
      }
    }
  });

  transform_column = ['rook', 'knight', 'bishop', 'queen', 'queen', 'bishop', 'knight', 'rook'];

  ({
    try_transforming: function(coord) {
      if ((this.color === 'white' && this.coordinate[1] === 8) || (this.color === 'black' && this.coordinate[1] === 1)) {
        this.type = transform_column[this.coordinate[0] - 1];
        this.retrieve_basic_info();
        this.initialize_state_info();
        return this.move_cd_ticks = this.move_cd;
      }
    },
    valid_moves: function(board_instance = board.instance) {
      return rule.move.strategies[this.type](this.color, this.coordinate, board_instance);
    },
    die: function() {
      if (!this.is_onboard()) {
        return;
      }
      board.instance.lift_piece(this.coordinate);
      this.coordinate = null;
      this.unhook_actions();
      return ev.trigger('piece_die', {
        piece: this,
        coord: this.coordinate
      });
    }
  });

}).call(this);
