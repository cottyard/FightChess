{
  "version": 3,
  "file": "board.js",
  "sourceRoot": "..\\..\\..",
  "sources": [
    "src\\game\\core\\board.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "class Board\r\n  players = ['white', 'black']\r\n\r\n  spawn_row = {\r\n    white: 7,\r\n    black: 2\r\n  }\r\n\r\n  king_spawn_coord = {\r\n    white: [5, 8],\r\n    black: [5, 1]\r\n  }\r\n\r\n  constructor: (@is_battleground) ->\r\n    @board = (\r\n      (null for j in [1..8]) for i in [1..8]\r\n    )\r\n\r\n    @spawn_cd = {\r\n      white: 0,\r\n      black: 0\r\n    }\r\n    \r\n    @is_battleground ?= false\r\n\r\n    if @is_battleground\r\n      @hook()\r\n\r\n  set_out_board: ->\r\n    for p in players\r\n      @place_piece (new piece.Piece p, 'king'), king_spawn_coord[p]\r\n      @spawn p\r\n      @spawn p\r\n      @activate_spawn_cd p\r\n\r\n  count_piece: (type, color) ->\r\n    count = 0\r\n    for [coord, p] from @all_pieces()\r\n      if p.type is type and p.color is color\r\n        count++\r\n    count\r\n\r\n  count_pieces: ->\r\n    count = {}\r\n    for p in players\r\n      count[p] = 0\r\n    for [coord, p] from @all_pieces()\r\n      count[p.color]++\r\n    count\r\n\r\n  activate_spawn_cd: (color) ->\r\n    @spawn_cd[color] = rule.spawn.spawn_cd @count_pieces()[color]\r\n\r\n  reduce_spawn_cd: ->\r\n    for p in players\r\n      if @spawn_cd[p] > 0\r\n        @spawn_cd[p]--\r\n\r\n  all_pieces: ->\r\n    for i in [1..8]\r\n      for j in [1..8]\r\n        if @is_occupied [i, j]\r\n          yield [[i, j], @get_piece [i, j]]\r\n\r\n  clean_up_board: ->\r\n    for [[i, j], piece] from @all_pieces()\r\n      @lift_piece [i, j]\r\n\r\n  get_piece: ([coord_x, coord_y]) ->\r\n    @board[coord_x - 1][coord_y - 1]\r\n\r\n  lift_piece: ([coord_x, coord_y]) ->\r\n    @board[coord_x - 1][coord_y - 1] = null\r\n\r\n  place_piece: (piece, [coord_x, coord_y]) ->\r\n    @board[coord_x - 1][coord_y - 1] = piece\r\n\r\n  is_occupied: ([coord_x, coord_y]) ->\r\n    @board[coord_x - 1][coord_y - 1]?\r\n\r\n  spawn: (color) ->\r\n    spawn_cols = []\r\n    row = spawn_row[color]\r\n    for col in [1..8]\r\n      spawn_cols.push col if not @is_occupied [col, row]\r\n    return false unless spawn_cols.length > 0\r\n    @place_piece (new piece.Piece color, 'pawn'), \r\n                 [spawn_cols[(calc.randint [0, spawn_cols.length - 1])], row]\r\n    true\r\n\r\n  is_battleground: ->\r\n    @is_battleground\r\n\r\n  clone: ->\r\n    brd = new Board()\r\n    for [coord, piece] from @all_pieces()\r\n      brd.place_piece piece.clone(), coord\r\n    brd\r\n\r\n  hook: ->\r\n    ev.hook 'assist_round_begin', @on_assist_round_begin\r\n    ev.hook 'assist_round_end', @on_assist_round_end\r\n    ev.hook 'attack_round_begin', @on_attack_round_begin\r\n    ev.hook 'attack_round_end', @on_attack_round_end\r\n    ev.hook 'recover_round', @on_recover_round\r\n    ev.hook 'move_round_end', @on_move_round_end\r\n\r\n  unhook: ->\r\n    ev.unhook 'assist_round_begin', @on_assist_round_begin\r\n    ev.unhook 'assist_round_end', @on_assist_round_end\r\n    ev.unhook 'attack_round_begin', @on_attack_round_begin\r\n    ev.unhook 'attack_round_end', @on_attack_round_end\r\n    ev.unhook 'recover_round', @on_recover_round\r\n    ev.unhook 'move_round_end', @on_move_round_end\r\n\r\n  on_assist_round_begin: =>\r\n    for [coord, p] from @all_pieces()\r\n      p.reset_assisted_abilities()\r\n      moves = rule.move.valid_moves p.type, p.color, coord, this\r\n      for def_coord in moves.defensive\r\n        astee = @get_piece def_coord\r\n        ev.trigger 'battle_assist', {\r\n          aster: p, \r\n          astee: astee,\r\n          coord_from: coord, \r\n          coord_to: def_coord,\r\n          assistance: p.assistance,\r\n          heal: p.heal\r\n        }\r\n\r\n  on_assist_round_end: =>\r\n    for [coord, p] from @all_pieces()\r\n      p.adjust_shield()\r\n\r\n  on_attack_round_begin: =>\r\n    for [coord, p] from @all_pieces()\r\n      if p.attack_cd_ticks > 0\r\n        continue\r\n      moves = rule.move.valid_moves p.type, p.color, coord, this\r\n      if moves.offensive.length is 0\r\n        continue\r\n      for atk_coord in moves.offensive\r\n        target = @get_piece atk_coord\r\n        ev.trigger 'battle_attack', {\r\n          atker: p, \r\n          atkee: target,\r\n          coord_from: coord, \r\n          coord_to: atk_coord,\r\n          damage: p.attack\r\n        }\r\n      p.activate_attack_cd()\r\n\r\n  on_attack_round_end: =>\r\n    for [coord, p] from @all_pieces()\r\n      if p.is_dead()\r\n        @lift_piece coord\r\n        ev.trigger 'piece_die', {\r\n          piece: p,\r\n          coord: coord\r\n        }\r\n      else\r\n        p.reduce_attack_cd()\r\n\r\n  on_recover_round: =>\r\n    for [coord, p] from @all_pieces()\r\n      p.recover_shield()\r\n      p.recover_hp()\r\n      p.reduce_move_cd()\r\n\r\n  on_move_round_end: =>\r\n    @reduce_spawn_cd()\r\n    for p in players\r\n      if @spawn_cd[p] is 0\r\n        if @spawn p\r\n          @activate_spawn_cd p\r\n\r\n  get_valid_moves: (coord) ->\r\n    return rule.move.empty_moves unless @is_occupied coord\r\n    p = @get_piece coord\r\n    return rule.move.empty_moves unless p.can_move()\r\n    return rule.move.valid_moves p.type, p.color, coord, this\r\n\r\n  move_to: (from_coord, to_coord) ->\r\n    return unless @is_occupied from_coord\r\n    return if @is_occupied to_coord\r\n\r\n    p = @get_piece from_coord\r\n    @place_piece p, to_coord\r\n    @lift_piece from_coord\r\n\r\n    p.activate_move_cd()\r\n    \r\n    try_promoting p, to_coord\r\n    try_transforming p, to_coord\r\n\r\ntry_promoting = (piece, coord) ->\r\n  return unless piece.type is 'pawn'\r\n  if (piece.color is 'white' and coord[1] is 1) or\r\n     (piece.color is 'black' and coord[1] is 8)\r\n    piece.change_type 'super_pawn'\r\n    piece.activate_move_cd()\r\n\r\ntransform_column = ['rook', 'knight', 'bishop', 'queen', 'queen', 'bishop', 'knight', 'rook']\r\ntry_transforming = (piece, coord) ->\r\n  return unless piece.type is 'super_pawn'\r\n  if (piece.color is 'white' and coord[1] is 8) or\r\n     (piece.color is 'black' and coord[1] is 1)\r\n    piece.change_type transform_column[coord[0] - 1]\r\n    piece.activate_move_cd()\r\n\r\nwindow.board = {\r\n  Board\r\n}\r\n"
  ]
}