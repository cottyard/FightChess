// Generated by CoffeeScript 2.2.1
(function() {
  var get_state, init, on_end_of_rounds, on_render, set_state;

  init = function() {
    battleground.instance = new board.Board(true);
    battleground.instance.set_out_board();
    ev.hook('end_of_rounds', on_end_of_rounds);
    return ev.hook('render', on_render);
  };

  on_end_of_rounds = function(evt) {
    var bk, wk;
    wk = battleground.instance.count_piece('king', 'white');
    bk = battleground.instance.count_piece('king', 'black');
    if (wk === 0 && bk === 0) {
      return ev.trigger_now('game_end', {
        result: 'draw'
      });
    } else if (wk === 0) {
      return ev.trigger_now('game_end', {
        result: 'win',
        player: 'black'
      });
    } else if (bk === 0) {
      return ev.trigger_now('game_end', {
        result: 'win',
        player: 'white'
      });
    }
  };

  on_render = function(evt) {
    return paint.board(ui.ctx.static);
  };

  get_state = function() {
    var buffer, coord, j, k, len, len1, p, pointer, ref, serialized_pieces, sp;
    serialized_pieces = [];
    ref = battleground.instance.all_pieces();
    for (j = 0, len = ref.length; j < len; j++) {
      [coord, p] = ref[j];
      serialized_pieces.push(piece.serialize_piece(p, coord));
    }
    buffer = new ArrayBuffer(serialized_pieces.length * piece.serialization_btyes);
    pointer = 0;
    for (k = 0, len1 = serialized_pieces.length; k < len1; k++) {
      sp = serialized_pieces[k];
      calc.write_buf_to_buf(sp, buffer, 0, pointer, piece.serialization_btyes);
      pointer += piece.serialization_btyes;
    }
    return buffer;
  };

  set_state = function(buffer) {
    var coord, i, j, p, piece_count, pointer, ref, results, sp;
    battleground.instance.clean_up_board();
    piece_count = buffer.byteLength / piece.serialization_btyes;
    pointer = 0;
    results = [];
    for (i = j = 0, ref = piece_count; undefined !== 0 && (0 <= ref ? 0 <= j && j < ref : 0 >= j && j > ref); i = 0 <= ref ? ++j : --j) {
      sp = new ArrayBuffer(piece.serialization_btyes);
      calc.write_buf_to_buf(buffer, sp, i * piece.serialization_btyes, 0, piece.serialization_btyes);
      [p, coord] = piece.deserialize_piece(sp);
      results.push(battleground.instance.place_piece(p, coord));
    }
    return results;
  };

  window.battleground = {
    init,
    instance: null,
    get_state,
    set_state
  };

}).call(this);

//# sourceMappingURL=battleground.js.map
