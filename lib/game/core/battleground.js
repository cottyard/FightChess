// Generated by CoffeeScript 2.2.1
(function() {
  var get_state, init, on_render, set_state;

  init = function() {
    battleground.instance = new Board(true);
    battleground.instance.set_out_board();
    return ev.hook('render', on_render);
  };

  on_render = function(evt) {
    return paint.board(ui.ctx.static);
  };

  // TODO: rewrite the serialization
  get_state = function() {
    var buffer, j, k, l, len, len1, len2, p, pb, pieces, pointer, ref, serialized_pieces;
    serialized_pieces = [];
    ref = battleground.instance.board;
    for (j = 0, len = ref.length; j < len; j++) {
      pieces = ref[j];
      for (k = 0, len1 = pieces.length; k < len1; k++) {
        p = pieces[k];
        if (p != null) {
          serialized_pieces.push(piece.serialize_piece(p));
        }
      }
    }
    buffer = new ArrayBuffer(serialized_pieces.length * piece.serialization_btyes);
    pointer = 0;
    for (l = 0, len2 = serialized_pieces.length; l < len2; l++) {
      pb = serialized_pieces[l];
      calc.write_buf_to_buf(pb, buffer, 0, pointer, piece.serialization_btyes);
      pointer += piece.serialization_btyes;
    }
    return buffer;
  };

  set_state = function(buffer) {
    var i, j, p, pb, piece_count, pointer, ref, results;
    battleground.instance.clean_up_board();
    piece_count = buffer.byteLength / piece.serialization_btyes;
    pointer = 0;
    results = [];
    for (i = j = 0, ref = piece_count; undefined !== 0 && (0 <= ref ? 0 <= j && j < ref : 0 >= j && j > ref); i = 0 <= ref ? ++j : --j) {
      pb = new ArrayBuffer(piece.serialization_btyes);
      calc.write_buf_to_buf(buffer, pb, i * piece.serialization_btyes, 0, piece.serialization_btyes);
      p = piece.deserialize_piece(pb);
      results.push(battleground.instance.place_piece(p));
    }
    return results;
  };

  window.battleground = {
    init,
    instance: null,
    get_state,
    set_state
  };

}).call(this);
