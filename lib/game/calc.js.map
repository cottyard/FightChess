{
  "version": 3,
  "file": "calc.js",
  "sourceRoot": "..\\..",
  "sources": [
    "src\\game\\calc.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "wrap_float_for_arraybuffer = (num, precision = 0.1) ->\r\n  Math.floor num * (1 / precision)\r\n\r\nunwrap_float_from_arraybuffer = (num, precision = 0.1) ->\r\n  num / (1 / precision)\r\n\r\nwrite_to_buffer = (buffer, pos, bytes, content) ->\r\n  constructor = if bytes is 1 then Uint8Array else Uint16Array\r\n  view = new constructor buffer, pos, 1\r\n  view[0] = content\r\n\r\nread_from_buffer = (buffer, pos, bytes) ->\r\n  constructor = if bytes is 1 then Uint8Array else Uint16Array\r\n  view = new constructor buffer, pos, 1\r\n  view[0]\r\n\r\nsum_byte_spec_size = (byte_spec) ->\r\n  total_bytes = 0\r\n  for attr of byte_spec\r\n    total_bytes += byte_spec[attr]\r\n  total_bytes\r\n\r\nobj_to_arraybuffer = (obj, byte_spec) ->\r\n  buffer = new ArrayBuffer sum_byte_spec_size byte_spec\r\n  byte_count = 0\r\n  for attr of byte_spec\r\n    write_to_buffer buffer, byte_count, byte_spec[attr], obj[attr]\r\n    byte_count += byte_spec[attr]\r\n  buffer\r\n\r\narraybuffer_to_obj = (buffer, byte_spec) ->\r\n  obj = {}\r\n  byte_count = 0\r\n  for attr of byte_spec\r\n    content = read_from_buffer buffer, byte_count, byte_spec[attr]\r\n    obj[attr] = content\r\n    byte_count += byte_spec[attr]\r\n  obj\r\n\r\nwrite_buf_to_buf = (buffer_1, buffer_2, from_1, from_2, size)->\r\n  view_1 = new Uint8Array buffer_1\r\n  view_2 = new Uint8Array buffer_2\r\n  for i in [1..size]\r\n    view_2[from_2++] = view_1[from_1++]\r\n\r\nto_string = (obj) ->\r\n  JSON.stringify obj\r\n\r\nfrom_string = (str) ->\r\n  JSON.parse str\r\n\r\nset_type = (obj, type) ->\r\n  obj.__proto__ = type.prototype\r\n  obj\r\n\r\ncopy_array = (arr) ->\r\n  arr.slice 0\r\n\r\nremove_item_from_array = (item, arr) ->\r\n  index = arr.indexOf item\r\n  arr.splice index, 1 unless index is -1\r\n\r\nrandint = ([lower, upper]) ->\r\n  Math.floor((Math.random() * (upper - lower + 1)) + lower);\r\n\r\npick_one = (list) ->\r\n  list[calc.randint([0, list.length - 1])]\r\n\r\nshrink_segment = (point_from, point_to, length = 15)->\r\n  [x, y] = point_from\r\n  [to_x, to_y] = point_to\r\n  angle = get_segment_angle x, y, to_x, to_y\r\n  dx = length * Math.sin angle\r\n  dy = length * Math.cos angle\r\n  x += dx\r\n  y -= dy\r\n  to_x -= dx\r\n  to_y += dy\r\n  return [[x, y], [to_x, to_y]]\r\n\r\nget_segment_angle = (x, y, to_x, to_y) ->\r\n  delta_x = to_x - x\r\n  delta_y = to_y - y\r\n  \r\n  if delta_x is 0\r\n    angle = if delta_y > 0 then Math.PI else 0\r\n  else\r\n    angle = Math.atan delta_y / delta_x\r\n    if delta_x < 0\r\n      angle -= Math.PI / 2\r\n    else\r\n      angle += Math.PI / 2\r\n  return angle\r\n\r\nhoop = (num, [range_lower, range_upper]) ->\r\n  num = range_lower if num < range_lower\r\n  num = range_upper if num > range_upper\r\n  num\r\n\r\ncoord_to_pos = ([x, y]) ->\r\n  pos_x = settings.grid_size * (x - 0.5)\r\n  pos_y = settings.grid_size * (y - 0.5)\r\n  [pos_x, pos_y]\r\n\r\npos_to_coord = ([x, y]) ->\r\n  coord_x = hoop x // settings.grid_size + 1, [1, 8]\r\n  coord_y = hoop y // settings.grid_size + 1, [1, 8]\r\n  [coord_x, coord_y]\r\n\r\ncoord_equal = (coord_1, coord_2) ->\r\n   coord_1[0] is coord_2[0] and coord_1[1] is coord_2[1]\r\n\r\ncoord_one_of = (coord, coord_list) ->\r\n  for c in coord_list\r\n    if coord_equal coord, c\r\n      return true\r\n  false\r\n\r\nwindow.calc = {\r\n  coord_to_pos,\r\n  pos_to_coord,\r\n  coord_equal,\r\n  coord_one_of,\r\n  \r\n  get_segment_angle,\r\n  shrink_segment,\r\n  \r\n  randint,\r\n  pick_one,\r\n  \r\n  remove_item_from_array,\r\n  copy_array,\r\n  \r\n  to_string,\r\n  from_string,\r\n  set_type,\r\n\r\n  obj_to_arraybuffer,\r\n  arraybuffer_to_obj,\r\n\r\n  wrap_float_for_arraybuffer,\r\n  unwrap_float_from_arraybuffer,\r\n\r\n  write_buf_to_buf\r\n}"
  ]
}