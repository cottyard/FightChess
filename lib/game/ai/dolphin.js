// Generated by CoffeeScript 1.8.0
(function() {
  var evaluate_move, generate_all_moves, think_of_one_operation;

  generate_all_moves = function(board, color) {
    var all_moves, coord, current_piece, i, j, _i, _j, _k, _len, _ref;
    all_moves = [];
    for (i = _i = 1; _i <= 8; i = ++_i) {
      for (j = _j = 1; _j <= 8; j = ++_j) {
        if (!board.is_occupied([j, i])) {
          continue;
        }
        current_piece = board.get_piece([j, i]);
        if (current_piece.color !== color) {
          continue;
        }
        if (!current_piece.can_move()) {
          continue;
        }
        _ref = current_piece.valid_moves().regular;
        for (_k = 0, _len = _ref.length; _k < _len; _k++) {
          coord = _ref[_k];
          all_moves.push({
            piece: current_piece,
            coord_to: coord
          });
        }
      }
    }
    return all_moves;
  };

  evaluate_move = function(board, move) {
    var attacks, current_piece, evaluation, i, j, new_board, p, _i, _j;
    new_board = calc.clone(board);
    p = new_board.get_piece(move.piece.coordinate);
    new_board.lift_piece(move.piece.coordinate);
    p.coordinate = move.coord_to;
    new_board.place_piece(p);
    evaluation = 0;
    for (i = _i = 1; _i <= 8; i = ++_i) {
      for (j = _j = 1; _j <= 8; j = ++_j) {
        if (!new_board.is_occupied([j, i])) {
          continue;
        }
        current_piece = new_board.get_piece([j, i]);
        attacks = current_piece.valid_moves(new_board).offensive.length;
        if (current_piece.color === move.piece.color) {
          evaluation += attacks;
        } else {
          evaluation -= attacks;
        }
      }
    }
    return evaluation;
  };

  think_of_one_operation = function(board, color) {
    var all_moves, evaluation, m;
    all_moves = generate_all_moves(board, color);
    evaluation = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = all_moves.length; _i < _len; _i++) {
        m = all_moves[_i];
        _results.push([evaluate_move(board, m), m]);
      }
      return _results;
    })();
    evaluation.sort(function(e1, e2) {
      return e2[0] - e1[0];
    });
    if (evaluation[0] != null) {
      return evaluation[0][1];
    } else {
      return 'abort';
    }
  };

  window.ai.dolphin = {
    think_of_one_operation: think_of_one_operation
  };

}).call(this);
