{
  "version": 3,
  "file": "dolphin.js",
  "sourceRoot": "..\\..\\..",
  "sources": [
    "src\\game\\ai\\dolphin.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;AAAA,MAAA,cAAA,EAAA,aAAA,EAAA,kBAAA,EAAA,cAAA,EAAA,oBAAA,EAAA,sBAAA,EAAA;;EAAA,kBAAA,GAAqB,QAAA,CAAC,KAAD,EAAQ,KAAR,CAAA;AACnB,QAAA,SAAA,EAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA;IAAA,SAAA,GAAY;AACZ;IAAA,KAAA,QAAA;MAAI,CAAC,KAAD,EAAQ,CAAR;MACF,IAAgB,CAAC,CAAC,KAAF,KAAW,KAA3B;AAAA,iBAAA;;MACA,IAAA,CAAgB,CAAC,CAAC,QAAF,CAAA,CAAhB;AAAA,iBAAA;;MACA,KAAA,GAAQ,KAAK,CAAC,eAAN,CAAsB,KAAtB;AACR;MAAA,KAAA,sCAAA;;QACE,SAAS,CAAC,IAAV,CAAe;UACb,KAAA,EAAO,CADM;UAEb,QAAA,EAAU,CAFG;UAGb,UAAA,EAAY;QAHC,CAAf;MADF;IAJF;WAUA;EAZmB;;EAcrB,UAAA,GACE;IAAA,MAAA,EAAQ,EAAR;IACA,YAAA,EAAc,EADd;IAEA,QAAA,EAAU,EAFV;IAGA,QAAA,EAAU,EAHV;IAIA,MAAA,EAAQ,EAJR;IAKA,OAAA,EAAS,EALT;IAMA,MAAA,EAAQ;EANR;;EAQF,cAAA,GACE;IAAA,KAAA,EAAO,CAAC,IAAD,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CAAP;IACA,KAAA,EAAO,CAAC,IAAD,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B;EADP;;EAGF,oBAAA,GACE;IAAA,KAAA,EAAO,CAAC,IAAD,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CAAP;IACA,KAAA,EAAO,CAAC,IAAD,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B;EADP;;EAGF,cAAA,GAAiB,QAAA,CAAC,KAAD,EAAQ,KAAR,CAAA;AACf,QAAA,KAAA,EAAA,GAAA,EAAA,CAAA,EAAA,KAAA,EAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;IAAA,CAAA,GAAI;AACJ;IAAA,KAAA,QAAA;MAAI,CAAC,CAAC,GAAD,EAAM,GAAN,CAAD,EAAa,CAAb;MACF,IAAA,GAAO,CAAC,CAAC,KAAF,KAAW;MAClB,IAAG,IAAH;QACE,CAAA,IAAK,UAAW,CAAA,CAAC,CAAC,IAAF;QAChB,IAAG,CAAC,CAAC,IAAF,KAAU,MAAb;UACE,CAAA,IAAK,cAAe,CAAA,KAAA,CAAO,CAAA,GAAA,EAD7B;;QAEA,IAAG,CAAC,CAAC,IAAF,KAAU,YAAb;UACE,CAAA,IAAK,oBAAqB,CAAA,KAAA,CAAO,CAAA,GAAA,EADnC;SAJF;;MAOA,KAAA,GAAQ,KAAK,CAAC,eAAN,CAAsB,CAAC,GAAD,EAAM,GAAN,CAAtB;MAER,KAAA,kBAAQ,OAAO;QAAA,CAAA,EAAI,CAAC;MAAL;MAEf,CAAA,IAAK,KAAK,CAAC,SAAS,CAAC,MAAhB,GAAyB;MAC9B,CAAA,IAAK,KAAK,CAAC,SAAS,CAAC,MAAhB,GAAyB,KAAzB,GAAiC;IAdxC;WAeA;EAjBe;;EAmBjB,aAAA,GAAgB,QAAA,CAAC,KAAD,EAAQ,KAAR,EAAe,IAAf,CAAA;AACd,QAAA;IAAA,CAAA,GAAI,KAAK,CAAC,KAAN,CAAA;IACJ,CAAC,CAAC,OAAF,CAAU,IAAI,CAAC,UAAf,EAA2B,IAAI,CAAC,QAAhC;AACA,WAAO,cAAA,CAAe,CAAf,EAAkB,KAAlB;EAHO;;EAKhB,sBAAA,GAAyB,QAAA,CAAC,KAAD,EAAQ,KAAR,CAAA;AACvB,QAAA,SAAA,EAAA,OAAA,EAAA,WAAA,EAAA,CAAA,EAAA;IAAA,OAAA,GAAU,cAAA,CAAe,KAAf;IACV,SAAA,GAAY,kBAAA,CAAmB,KAAnB,EAA0B,KAA1B,EADZ;;;IAKA,WAAA;;AAAe;MAAA,KAAA,2CAAA;;qBAAA,CAAC,aAAA,CAAc,KAAd,EAAqB,KAArB,EAA4B,CAA5B,CAAD,EAAiC,CAAjC;MAAA,CAAA;;;IACf,WAAW,CAAC,IAAZ,CAAiB,QAAA,CAAC,EAAD,EAAK,EAAL,CAAA;aAAY,EAAG,CAAA,CAAA,CAAH,GAAQ,EAAG,CAAA,CAAA;IAAvB,CAAjB;IAEA,IAAO,sBAAP;AACE,aAAO,QADT;;IAGA,CAAC,KAAD,EAAQ,CAAR,CAAA,GAAa,WAAY,CAAA,CAAA;IAEzB,IAAG,KAAA,GAAQ,OAAX;AACE,aAAO,EADT;KAAA,MAAA;AAGE,aAAO,QAHT;;EAduB;;EAmBzB,MAAM,CAAC,EAAE,CAAC,OAAV,GAAoB,CAClB,sBADkB;AA1EpB",
  "sourcesContent": [
    "generate_all_moves = (board, color) ->\r\n  all_moves = []\r\n  for [coord, p] from board.all_pieces()\r\n    continue unless p.color is color\r\n    continue unless p.can_move()\r\n    moves = board.get_valid_moves coord\r\n    for c in moves.regular\r\n      all_moves.push {\r\n        piece: p,\r\n        coord_to: c,\r\n        coord_from: coord\r\n      }\r\n  all_moves\r\n\r\ntype_value = \r\n  'pawn': 10\r\n  'super_pawn': 20\r\n  'knight': 30,\r\n  'bishop': 30,\r\n  'rook': 30,\r\n  'queen': 30,\r\n  'king': 0\r\n\r\npawn_pos_value = \r\n  white: [null, 0, 5, 4, 3, 2, 0, 0, 0]\r\n  black: [null, 0, 0, 2, 3, 4, 5, 0, 0]\r\n\r\nsuper_pawn_pos_value = \r\n  white: [null, 0, 1, 2, 3, 4, 5, 6, 0]\r\n  black: [null, 0, 6, 5, 4, 3, 2, 1, 0]\r\n\r\nevaluate_board = (board, color) ->\r\n  e = 0\r\n  for [[col, row], p] from board.all_pieces()\r\n    ours = p.color is color\r\n    if ours\r\n      e += type_value[p.type]\r\n      if p.type is 'pawn'\r\n        e += pawn_pos_value[color][row]\r\n      if p.type is 'super_pawn'\r\n        e += super_pawn_pos_value[color][row]\r\n\r\n    moves = board.get_valid_moves [col, row]\r\n\r\n    coeff = ours ? 1 : -1\r\n\r\n    e += moves.offensive.length * coeff\r\n    e -= moves.defensive.length * coeff * 0.5\r\n  e\r\n\r\nevaluate_move = (board, color, move) ->\r\n  b = board.clone()\r\n  b.move_to move.coord_from, move.coord_to\r\n  return evaluate_board b, color\r\n\r\nthink_of_one_operation = (board, color) ->\r\n  current = evaluate_board board\r\n  all_moves = generate_all_moves board, color\r\n  #console.log (String(m[1].coord_to[0])+String(m[1].coord_to[1]) for m in evaluation)\r\n  #console.log (m[0] for m in evaluation)\r\n  \r\n  evaluations = ([evaluate_move(board, color, m), m] for m in all_moves)\r\n  evaluations.sort (e1, e2) -> e2[0] - e1[0]\r\n\r\n  unless evaluations[0]? \r\n    return 'abort'\r\n\r\n  [max_e, m] = evaluations[0]\r\n\r\n  if max_e > current\r\n    return m\r\n  else\r\n    return 'abort'\r\n\r\nwindow.ai.dolphin = {\r\n  think_of_one_operation\r\n}\r\n"
  ]
}