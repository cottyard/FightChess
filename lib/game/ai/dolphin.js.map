{
  "version": 3,
  "file": "dolphin.js",
  "sourceRoot": "..\\..\\..",
  "sources": [
    "src\\game\\ai\\dolphin.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "generate_all_moves = (board, color) ->\r\n  all_moves = []\r\n  for [coord, p] from board.all_pieces()\r\n    continue unless p.color is color\r\n    continue unless p.can_move()\r\n    moves = board.get_valid_moves coord\r\n    for c in moves.regular\r\n      all_moves.push {\r\n        piece: p,\r\n        coord_to: c,\r\n        coord_from: coord\r\n      }\r\n  all_moves\r\n\r\n\r\ntype_value = \r\n  'pawn': 10\r\n  'super_pawn': 20\r\n  'knight': 30,\r\n  'bishop': 30,\r\n  'rook': 30,\r\n  'queen': 30,\r\n  'king': 0\r\n\r\npawn_pos_value =\r\n  1: 0\r\n  2: 0\r\n  3: 0\r\n  4: 2\r\n  5: 3\r\n  6: 4\r\n  7: 5\r\n  8: 0\r\n\r\nsuper_pawn_pos_value = \r\n  1: 0\r\n  2: 6\r\n  3: 5\r\n  4: 4\r\n  5: 3\r\n  6: 2\r\n  7: 1\r\n  8: 0\r\n\r\nevaluate_board = (board, color) ->\r\n  # e = 0\r\n  # for [[col, row], p] from b.all_pieces()\r\n  #   ours = p.color is color\r\n  #   if ours\r\n  #     e += type_value[p.type]\r\n  #     if p.type is 'pawn'\r\n  #       e += pawn_pos_value[?]\r\n\r\n\r\nevaluate_move = (board, color, move) ->\r\n  b = board.clone()\r\n  b.move_to move.coord_from, move.coord_to\r\n  continue unless p.can_move()\r\n  b.get_valid_moves coord\r\n  attacks = current_piece.valid_moves(b).offensive.length\r\n  if current_piece.color is move.piece.color\r\n    evaluation += attacks\r\n  else\r\n    evaluation -= attacks\r\n  \r\n\r\nthink_of_one_operation = (board, color) ->\r\n  all_moves = generate_all_moves board, color\r\n  evaluation = ([evaluate_move(board, m), m] for m in all_moves)\r\n  evaluation.sort (e1, e2) -> e2[0] - e1[0]\r\n  #console.log (String(m[1].coord_to[0])+String(m[1].coord_to[1]) for m in evaluation)\r\n  #console.log (m[0] for m in evaluation)\r\n  #console.log evaluation\r\n  \r\n  if evaluation[0]? then evaluation[0][1] else 'abort'\r\n\r\nwindow.ai.dolphin = {\r\n  think_of_one_operation\r\n}"
  ]
}