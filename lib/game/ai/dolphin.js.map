{
  "version": 3,
  "file": "dolphin.js",
  "sourceRoot": "..\\..\\..",
  "sources": [
    "src\\game\\ai\\dolphin.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;AAAA,MAAA,aAAA,EAAA,kBAAA,EAAA;;EAAA,kBAAA,GAAqB,QAAA,CAAC,KAAD,EAAQ,KAAR,CAAA;AACnB,QAAA,SAAA,EAAA,KAAA,EAAA,aAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA;IAAA,SAAA,GAAY;IACZ,KAAS,0BAAT;MACE,KAAS,0BAAT;QACE,IAAA,CAAgB,KAAK,CAAC,WAAN,CAAkB,CAAC,CAAD,EAAI,CAAJ,CAAlB,CAAhB;AAAA,mBAAA;;QACA,aAAA,GAAgB,KAAK,CAAC,SAAN,CAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB;QAChB,IAAgB,aAAa,CAAC,KAAd,KAAuB,KAAvC;AAAA,mBAAA;;QACA,IAAA,CAAgB,aAAa,CAAC,QAAd,CAAA,CAAhB;AAAA,mBAAA;;AACA;QAAA,KAAA,qCAAA;;UACE,SAAS,CAAC,IAAV,CAAe;YACb,KAAA,EAAO,aADM;YAEb,QAAA,EAAU;UAFG,CAAf;QADF;MALF;IADF;WAWA;EAbmB;;EAerB,aAAA,GAAgB,QAAA,CAAC,KAAD,EAAQ,IAAR,CAAA;AACd,QAAA,OAAA,EAAA,aAAA,EAAA,UAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,SAAA,EAAA;IAAA,SAAA,GAAY,IAAI,CAAC,KAAL,CAAW,KAAX;IACZ,CAAA,GAAI,SAAS,CAAC,SAAV,CAAoB,IAAI,CAAC,KAAK,CAAC,UAA/B;IACJ,SAAS,CAAC,UAAV,CAAqB,IAAI,CAAC,KAAK,CAAC,UAAhC;IACA,CAAC,CAAC,UAAF,GAAe,IAAI,CAAC;IACpB,SAAS,CAAC,WAAV,CAAsB,CAAtB;IAEA,UAAA,GAAa;IACb,KAAS,0BAAT;MACE,KAAS,0BAAT;QACE,IAAA,CAAgB,SAAS,CAAC,WAAV,CAAsB,CAAC,CAAD,EAAI,CAAJ,CAAtB,CAAhB;AAAA,mBAAA;;QACA,aAAA,GAAgB,SAAS,CAAC,SAAV,CAAoB,CAAC,CAAD,EAAI,CAAJ,CAApB;QAChB,OAAA,GAAU,aAAa,CAAC,WAAd,CAA0B,SAA1B,CAAoC,CAAC,SAAS,CAAC;QACzD,IAAG,aAAa,CAAC,KAAd,KAAuB,IAAI,CAAC,KAAK,CAAC,KAArC;UACE,UAAA,IAAc,QADhB;SAAA,MAAA;UAGE,UAAA,IAAc,QAHhB;;MAJF;IADF;WASA;EAjBc;;EAmBhB,sBAAA,GAAyB,QAAA,CAAC,KAAD,EAAQ,KAAR,CAAA;AACvB,QAAA,SAAA,EAAA,UAAA,EAAA;IAAA,SAAA,GAAY,kBAAA,CAAmB,KAAnB,EAA0B,KAA1B;IAEZ,UAAA;;AAAc;MAAA,KAAA,2CAAA;;qBAAA,CAAC,aAAA,CAAc,KAAd,EAAqB,CAArB,CAAD,EAA0B,CAA1B;MAAA,CAAA;;;IACd,UAAU,CAAC,IAAX,CAAgB,QAAA,CAAC,EAAD,EAAK,EAAL,CAAA;aAAY,EAAG,CAAA,CAAA,CAAH,GAAQ,EAAG,CAAA,CAAA;IAAvB,CAAhB,EAHA;;;;IAQA,IAAG,qBAAH;aAAuB,UAAW,CAAA,CAAA,CAAG,CAAA,CAAA,EAArC;KAAA,MAAA;aAA6C,QAA7C;;EATuB;;EAWzB,MAAM,CAAC,EAAE,CAAC,OAAV,GAAoB,CAClB,sBADkB;AA7CpB",
  "sourcesContent": [
    "generate_all_moves = (board, color) ->\r\n  all_moves = []\r\n  for i in [1..8]\r\n    for j in [1..8]\r\n      continue unless board.is_occupied [j, i]\r\n      current_piece = board.get_piece [j, i]\r\n      continue unless current_piece.color is color\r\n      continue unless current_piece.can_move()\r\n      for coord in current_piece.valid_moves().regular\r\n        all_moves.push {\r\n          piece: current_piece,\r\n          coord_to: coord\r\n        }\r\n  all_moves\r\n\r\nevaluate_move = (board, move) ->\r\n  new_board = calc.clone board\r\n  p = new_board.get_piece move.piece.coordinate\r\n  new_board.lift_piece move.piece.coordinate\r\n  p.coordinate = move.coord_to\r\n  new_board.place_piece p\r\n  \r\n  evaluation = 0\r\n  for i in [1..8]\r\n    for j in [1..8]\r\n      continue unless new_board.is_occupied [j, i]\r\n      current_piece = new_board.get_piece [j, i]\r\n      attacks = current_piece.valid_moves(new_board).offensive.length\r\n      if current_piece.color is move.piece.color\r\n        evaluation += attacks\r\n      else\r\n        evaluation -= attacks\r\n  evaluation\r\n\r\nthink_of_one_operation = (board, color) ->\r\n  all_moves = generate_all_moves board, color\r\n  \r\n  evaluation = ([evaluate_move(board, m), m] for m in all_moves)\r\n  evaluation.sort (e1, e2) -> e2[0] - e1[0]\r\n  #console.log (String(m[1].coord_to[0])+String(m[1].coord_to[1]) for m in evaluation)\r\n  #console.log (m[0] for m in evaluation)\r\n  #console.log evaluation\r\n  \r\n  if evaluation[0]? then evaluation[0][1] else 'abort'\r\n\r\nwindow.ai.dolphin = {\r\n  think_of_one_operation\r\n}"
  ]
}