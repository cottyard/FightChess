{
  "version": 3,
  "file": "dolphin.js",
  "sourceRoot": "..\\..\\..",
  "sources": [
    "src\\game\\ai\\dolphin.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "generate_all_moves = (board, color) ->\r\n  all_moves = []\r\n  for [coord, p] from board.all_pieces()\r\n    continue unless p.color is color\r\n    continue unless p.can_move()\r\n    moves = board.get_valid_regular_moves coord\r\n    for c in moves\r\n      all_moves.push {\r\n        piece: p,\r\n        coord_to: c,\r\n        coord_from: coord\r\n      }\r\n  all_moves\r\n\r\ntype_value = \r\n  'pawn': 10\r\n  'super_pawn': 20\r\n  'knight': 30,\r\n  'bishop': 30,\r\n  'rook': 30,\r\n  'queen': 30,\r\n  'king': 0\r\n\r\npawn_pos_value = \r\n  white: [null, 0, 5, 4, 3, 2, 0, 0, 0]\r\n  black: [null, 0, 0, 0, 2, 3, 4, 5, 0]\r\n\r\nsuper_pawn_pos_value = \r\n  white: [null, 0, 1, 2, 3, 4, 5, 6.5, 0]\r\n  black: [null, 0, 6.5, 5, 4, 3, 2, 1, 0]\r\n\r\nevaluate_board = (board, color, log = no) ->\r\n  e = 0\r\n  attacked = 0\r\n  attacking = 0\r\n  them_defending = 0\r\n  us_defending = 0\r\n  king_attacked = 0\r\n  king_attacking = 0\r\n  king_coord_x = null\r\n  king_coord_y = null\r\n  king_hp = null\r\n  enemy_king_hp = null\r\n  pos_value = 0\r\n  enemy_king_coord_x = null\r\n  enemy_king_coord_y = null\r\n\r\n  for [[col, row], p] from board.all_pieces()\r\n    ours = p.color is color\r\n    if ours\r\n      e += type_value[p.type]\r\n      if p.type is 'pawn'\r\n        e += pawn_pos_value[color][row]\r\n        pos_value += pawn_pos_value[color][row]\r\n      if p.type is 'super_pawn'\r\n        e += super_pawn_pos_value[color][row]\r\n        pos_value += pawn_pos_value[color][row]\r\n      if p.type is 'king'\r\n        [king_coord_x, king_coord_y] = [col, row]\r\n        king_hp = p.hp\r\n    else\r\n      if p.type is 'king'\r\n        [enemy_king_coord_x, enemy_king_coord_y] = [col, row]\r\n        enemy_king_hp = p.hp\r\n\r\n    moves = board.get_moves [col, row]\r\n\r\n    coeff = if ours then 1 else -1\r\n\r\n    e += moves.offensive.length * coeff\r\n    e -= moves.defensive.length * coeff * 0.5\r\n\r\n    if ours\r\n      attacking += moves.offensive.length\r\n      us_defending += moves.defensive.length\r\n    else\r\n      attacked += moves.offensive.length\r\n      them_defending += moves.defensive.length\r\n\r\n    for c in moves.offensive\r\n      p = board.get_piece c\r\n      switch p.type\r\n        when 'king'\r\n          if p.color is color\r\n            king_attacked += 1\r\n          else\r\n            king_attacking += 1\r\n        when 'queen'\r\n          e += if p.color is color then -0.8 else 0.5\r\n\r\n  attacked_coeff =\r\n    switch \r\n      when king_hp < 100 then 5\r\n      when king_hp < 500 then 3\r\n      when king_hp < 900 then 1.5\r\n      else 0.5\r\n\r\n  attacking_coeff =\r\n    switch \r\n      when enemy_king_hp < 100 then 3\r\n      when enemy_king_hp < 500 then 1\r\n      when enemy_king_hp < 900 then 0.7\r\n      else 0.4\r\n\r\n  e -= king_attacked * attacked_coeff\r\n  e += king_attacking * attacking_coeff\r\n\r\n  distance = 7\r\n  for [[col, row], p] from board.all_pieces()\r\n    continue unless p.color is color\r\n    continue if p.type is 'king'\r\n    dis = Math.max(Math.abs(king_coord_x-col), Math.abs(king_coord_y-row))\r\n    if dis < distance\r\n      distance = dis\r\n\r\n  e -= distance\r\n\r\n  if log\r\n    console.log '======================================='\r\n    console.log 'attacking', attacking, 'attacked', attacked\r\n    console.log 'us_defending', us_defending, 'them_defending', them_defending\r\n    console.log 'king_attacking', king_attacking * attacking_coeff, 'king_attacked', king_attacked * attacked_coeff\r\n    console.log 'king', king_coord_x, king_coord_y\r\n    console.log 'enemy king', enemy_king_coord_x, enemy_king_coord_y\r\n    console.log 'pos', pos_value\r\n    console.log 'king isolation', distance\r\n    console.log 'current', e\r\n\r\n  return e\r\n\r\nevaluate_move = (board, color, move) ->\r\n  b = board.clone()\r\n  b.move_to move.coord_from, move.coord_to\r\n  return evaluate_board b, color\r\n\r\nthink_of_one_operation = (board, color) ->\r\n  current = evaluate_board board, color\r\n  all_moves = generate_all_moves board, color\r\n  #console.log (String(m[1].coord_to[0])+String(m[1].coord_to[1]) for m in evaluation)\r\n  #console.log (m[0] for m in evaluation)\r\n  \r\n  evaluations = ([evaluate_move(board, color, m), m] for m in all_moves)\r\n  evaluations.sort (e1, e2) -> e2[0] - e1[0]\r\n\r\n  unless evaluations[0]? \r\n    return 'abort'\r\n\r\n  [max_e, m] = evaluations[0]\r\n\r\n  if max_e > current\r\n    return m\r\n  else\r\n    return 'abort'\r\n\r\nwindow.ai.dolphin = {\r\n  think_of_one_operation\r\n}\r\n"
  ]
}