// Generated by CoffeeScript 2.2.1
(function() {
  var add_defensive_move, add_offensive_move, add_regular_move, bishop, bishop_moves_orients, is_in_board, is_in_range, king, king_moves_deltas, knight, knight_moves_deltas, pawn, queen, rook, rook_moves_orients, super_pawn, super_pawn_atk_ast_deltas, super_pawn_moves_deltas, valid_moves;

  is_in_range = function(num, [lower, upper]) {
    return num >= lower && num <= upper;
  };

  is_in_board = function(coord) {
    var x, y;
    [x, y] = coord;
    return is_in_range(x, [1, 8]) && is_in_range(y, [1, 8]);
  };

  add_regular_move = function(moves, coord, board) {
    if (is_in_board(coord) && !board.is_occupied(coord)) {
      moves.push(coord);
      return true;
    }
    return false;
  };

  add_offensive_move = function(moves, color, coord, board) {
    if (is_in_board(coord) && board.is_occupied(coord) && board.get_piece(coord).color !== color) {
      moves.push(coord);
      return true;
    }
    return false;
  };

  add_defensive_move = function(moves, color, coord, board) {
    if (is_in_board(coord) && board.is_occupied(coord) && board.get_piece(coord).color === color) {
      moves.push(coord);
      return true;
    }
    return false;
  };

  pawn = function(color, coord, board) {
    var col, defensive, offensive, orient, regular, row, starting_row;
    regular = [];
    offensive = [];
    defensive = [];
    [col, row] = coord;
    starting_row = color === 'black' ? 2 : 7;
    orient = color === 'black' ? 1 : -1;
    if (add_regular_move(regular, [col, row + orient], board)) {
      if (row === starting_row) {
        add_regular_move(regular, [col, row + 2 * orient], board);
      }
    }
    add_offensive_move(offensive, color, [col + 1, row + orient], board);
    add_offensive_move(offensive, color, [col - 1, row + orient], board);
    add_defensive_move(defensive, color, [col + 1, row + orient], board);
    add_defensive_move(defensive, color, [col - 1, row + orient], board);
    return {regular, offensive, defensive};
  };

  super_pawn_atk_ast_deltas = [[1, 1], [1, -1], [-1, 1], [-1, -1]];

  super_pawn = function(color, coord, board) {
    var col, defensive, i, j, len, len1, offensive, regular, row, x, y;
    regular = [];
    offensive = [];
    defensive = [];
    [col, row] = coord;
    for (i = 0, len = super_pawn_moves_deltas.length; i < len; i++) {
      [x, y] = super_pawn_moves_deltas[i];
      add_regular_move(regular, [col + x, row + y], board);
    }
    for (j = 0, len1 = super_pawn_atk_ast_deltas.length; j < len1; j++) {
      [x, y] = super_pawn_atk_ast_deltas[j];
      add_defensive_move(defensive, color, [col + x, row + y], board);
      add_offensive_move(offensive, color, [col + x, row + y], board);
    }
    return {regular, offensive, defensive};
  };

  knight_moves_deltas = [[2, 1], [2, -1], [-2, 1], [-2, -1], [1, 2], [1, -2], [-1, 2], [-1, -2]];

  knight = function(color, coord, board) {
    var col, defensive, dx, dy, i, len, offensive, regular, row;
    regular = [];
    offensive = [];
    defensive = [];
    [col, row] = coord;
    for (i = 0, len = knight_moves_deltas.length; i < len; i++) {
      [dx, dy] = knight_moves_deltas[i];
      add_regular_move(regular, [col + dx, row + dy], board);
      add_offensive_move(offensive, color, [col + dx, row + dy], board);
      add_defensive_move(defensive, color, [col + dx, row + dy], board);
    }
    return {regular, offensive, defensive};
  };

  bishop_moves_orients = [[1, 1], [1, -1], [-1, 1], [-1, -1]];

  bishop = function(color, coord, board) {
    var col, defensive, dx, dy, i, len, next, offensive, regular, row;
    regular = [];
    offensive = [];
    defensive = [];
    [col, row] = coord;
    for (i = 0, len = bishop_moves_orients.length; i < len; i++) {
      [dx, dy] = bishop_moves_orients[i];
      next = [col, row];
      while (true) {
        next = [next[0] + dx, next[1] + dy];
        if (!add_regular_move(regular, next, board)) {
          break;
        }
      }
      add_offensive_move(offensive, color, next, board);
      add_defensive_move(defensive, color, next, board);
    }
    return {regular, offensive, defensive};
  };

  rook_moves_orients = [[1, 0], [0, 1], [-1, 0], [0, -1]];

  rook = function(color, coord, board) {
    var col, defensive, dx, dy, i, len, next, offensive, regular, row;
    regular = [];
    offensive = [];
    defensive = [];
    [col, row] = coord;
    for (i = 0, len = rook_moves_orients.length; i < len; i++) {
      [dx, dy] = rook_moves_orients[i];
      next = [col, row];
      while (true) {
        next = [next[0] + dx, next[1] + dy];
        if (!add_regular_move(regular, next, board)) {
          break;
        }
      }
      add_offensive_move(offensive, color, next, board);
      add_defensive_move(defensive, color, next, board);
    }
    return {regular, offensive, defensive};
  };

  queen = function(color, coord, board) {
    var col, defensive, dx, dy, i, len, next, offensive, ref, regular, row;
    regular = [];
    offensive = [];
    defensive = [];
    [col, row] = coord;
    ref = rook_moves_orients.concat(bishop_moves_orients);
    for (i = 0, len = ref.length; i < len; i++) {
      [dx, dy] = ref[i];
      next = [col, row];
      while (true) {
        next = [next[0] + dx, next[1] + dy];
        if (!add_regular_move(regular, next, board)) {
          break;
        }
      }
      add_offensive_move(offensive, color, next, board);
      add_defensive_move(defensive, color, next, board);
    }
    return {regular, offensive, defensive};
  };

  king_moves_deltas = [[1, 0], [0, 1], [-1, 0], [0, -1], [1, 1], [1, -1], [-1, 1], [-1, -1]];

  super_pawn_moves_deltas = king_moves_deltas;

  king = function(color, coord, board) {
    var col, defensive, dx, dy, i, len, offensive, regular, row;
    regular = [];
    offensive = [];
    defensive = [];
    [col, row] = coord;
    for (i = 0, len = king_moves_deltas.length; i < len; i++) {
      [dx, dy] = king_moves_deltas[i];
      add_regular_move(regular, [col + dx, row + dy], board);
      add_offensive_move(offensive, color, [col + dx, row + dy], board);
      add_defensive_move(defensive, color, [col + dx, row + dy], board);
    }
    return {regular, offensive, defensive};
  };

  valid_moves = function(type, color, coord, board) {
    return rule.move.strategies[type](color, coord, board);
  };

  window.rule.move = {
    valid_moves,
    empty_moves: {
      regular: [],
      offensive: [],
      defensive: []
    },
    strategies: {pawn, super_pawn, knight, bishop, rook, queen, king}
  };

}).call(this);

//# sourceMappingURL=move.js.map
