{
  "version": 3,
  "file": "move.js",
  "sourceRoot": "..\\..\\..",
  "sources": [
    "src\\game\\rule\\move.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;AAAA,MAAA,kBAAA,EAAA,kBAAA,EAAA,gBAAA,EAAA,MAAA,EAAA,oBAAA,EAAA,WAAA,EAAA,WAAA,EAAA,IAAA,EAAA,iBAAA,EAAA,MAAA,EAAA,mBAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,kBAAA,EAAA,UAAA,EAAA,yBAAA,EAAA,uBAAA,EAAA;;EAAA,WAAA,GAAc,QAAA,CAAC,GAAD,EAAM,CAAC,KAAD,EAAQ,KAAR,CAAN,CAAA;WACZ,GAAA,IAAO,KAAP,IAAiB,GAAA,IAAO;EADZ;;EAGd,WAAA,GAAc,QAAA,CAAC,KAAD,CAAA;AACZ,QAAA,CAAA,EAAA;IAAA,CAAC,CAAD,EAAI,CAAJ,CAAA,GAAS;WACT,WAAA,CAAY,CAAZ,EAAe,CAAC,CAAD,EAAI,CAAJ,CAAf,CAAA,IAA2B,WAAA,CAAY,CAAZ,EAAe,CAAC,CAAD,EAAI,CAAJ,CAAf;EAFf;;EAId,gBAAA,GAAmB,QAAA,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAAA;IACjB,IAAG,WAAA,CAAY,KAAZ,CAAA,IAAuB,CAAI,KAAK,CAAC,WAAN,CAAkB,KAAlB,CAA9B;MACE,KAAK,CAAC,IAAN,CAAW,KAAX;AACA,aAAO,KAFT;;WAGA;EAJiB;;EAMnB,kBAAA,GAAqB,QAAA,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,CAAA;IACnB,IAAG,WAAA,CAAY,KAAZ,CAAA,IACA,KAAK,CAAC,WAAN,CAAkB,KAAlB,CADA,IAEA,KAAK,CAAC,SAAN,CAAgB,KAAhB,CAAsB,CAAC,KAAvB,KAAkC,KAFrC;MAGE,KAAK,CAAC,IAAN,CAAW,KAAX;AACA,aAAO,KAJT;;WAKA;EANmB;;EAQrB,kBAAA,GAAqB,QAAA,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,CAAA;IACnB,IAAG,WAAA,CAAY,KAAZ,CAAA,IACA,KAAK,CAAC,WAAN,CAAkB,KAAlB,CADA,IAEA,KAAK,CAAC,SAAN,CAAgB,KAAhB,CAAsB,CAAC,KAAvB,KAAgC,KAFnC;MAGE,KAAK,CAAC,IAAN,CAAW,KAAX;AACA,aAAO,KAJT;;WAKA;EANmB;;EAQrB,IAAA,GAAO,QAAA,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAAA;AACL,QAAA,GAAA,EAAA,SAAA,EAAA,SAAA,EAAA,MAAA,EAAA,OAAA,EAAA,GAAA,EAAA;IAAA,OAAA,GAAU;IACV,SAAA,GAAY;IACZ,SAAA,GAAY;IAEZ,CAAC,GAAD,EAAM,GAAN,CAAA,GAAa;IACb,YAAA,GAAkB,KAAA,KAAS,OAAZ,GAAyB,CAAzB,GAAgC;IAC/C,MAAA,GAAY,KAAA,KAAS,OAAZ,GAAyB,CAAzB,GAAgC,CAAC;IAE1C,IAAG,gBAAA,CAAiB,OAAjB,EAA0B,CAAC,GAAD,EAAM,GAAA,GAAM,MAAZ,CAA1B,EAA+C,KAA/C,CAAH;MACE,IAA4D,GAAA,KAAO,YAAnE;QAAA,gBAAA,CAAiB,OAAjB,EAA0B,CAAC,GAAD,EAAM,GAAA,GAAM,CAAA,GAAI,MAAhB,CAA1B,EAAmD,KAAnD,EAAA;OADF;;IAEA,kBAAA,CAAmB,SAAnB,EAA8B,KAA9B,EAAqC,CAAC,GAAA,GAAM,CAAP,EAAU,GAAA,GAAM,MAAhB,CAArC,EAA8D,KAA9D;IACA,kBAAA,CAAmB,SAAnB,EAA8B,KAA9B,EAAqC,CAAC,GAAA,GAAM,CAAP,EAAU,GAAA,GAAM,MAAhB,CAArC,EAA8D,KAA9D;IACA,kBAAA,CAAmB,SAAnB,EAA8B,KAA9B,EAAqC,CAAC,GAAA,GAAM,CAAP,EAAU,GAAA,GAAM,MAAhB,CAArC,EAA8D,KAA9D;IACA,kBAAA,CAAmB,SAAnB,EAA8B,KAA9B,EAAqC,CAAC,GAAA,GAAM,CAAP,EAAU,GAAA,GAAM,MAAhB,CAArC,EAA8D,KAA9D;WAEA,CAAC,OAAD,EAAU,SAAV,EAAqB,SAArB;EAhBK;;EAkBP,yBAAA,GAA4B,CAC1B,CAAC,CAAD,EAAI,CAAJ,CAD0B,EAClB,CAAC,CAAD,EAAI,CAAC,CAAL,CADkB,EACT,CAAC,CAAC,CAAF,EAAK,CAAL,CADS,EACA,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CADA;;EAI5B,UAAA,GAAa,QAAA,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAAA;AACX,QAAA,GAAA,EAAA,SAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,SAAA,EAAA,OAAA,EAAA,GAAA,EAAA,CAAA,EAAA;IAAA,OAAA,GAAU;IACV,SAAA,GAAY;IACZ,SAAA,GAAY;IAEZ,CAAC,GAAD,EAAM,GAAN,CAAA,GAAa;IACb,KAAA,yDAAA;MAAI,CAAC,CAAD,EAAI,CAAJ;MACF,gBAAA,CAAiB,OAAjB,EAA0B,CAAC,GAAA,GAAM,CAAP,EAAU,GAAA,GAAM,CAAhB,CAA1B,EAA8C,KAA9C;IADF;IAEA,KAAA,6DAAA;MAAI,CAAC,CAAD,EAAI,CAAJ;MACF,kBAAA,CAAmB,SAAnB,EAA8B,KAA9B,EAAqC,CAAC,GAAA,GAAM,CAAP,EAAU,GAAA,GAAM,CAAhB,CAArC,EAAyD,KAAzD;MACA,kBAAA,CAAmB,SAAnB,EAA8B,KAA9B,EAAqC,CAAC,GAAA,GAAM,CAAP,EAAU,GAAA,GAAM,CAAhB,CAArC,EAAyD,KAAzD;IAFF;WAIA,CAAC,OAAD,EAAU,SAAV,EAAqB,SAArB;EAZW;;EAcb,mBAAA,GAAsB,CACpB,CAAC,CAAD,EAAI,CAAJ,CADoB,EACZ,CAAC,CAAD,EAAI,CAAC,CAAL,CADY,EACH,CAAC,CAAC,CAAF,EAAK,CAAL,CADG,EACM,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CADN,EAEpB,CAAC,CAAD,EAAI,CAAJ,CAFoB,EAEZ,CAAC,CAAD,EAAI,CAAC,CAAL,CAFY,EAEH,CAAC,CAAC,CAAF,EAAK,CAAL,CAFG,EAEM,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CAFN;;EAKtB,MAAA,GAAS,QAAA,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAAA;AACP,QAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,GAAA,EAAA,SAAA,EAAA,OAAA,EAAA;IAAA,OAAA,GAAU;IACV,SAAA,GAAY;IACZ,SAAA,GAAY;IAEZ,CAAC,GAAD,EAAM,GAAN,CAAA,GAAa;IACb,KAAA,qDAAA;MAAI,CAAC,EAAD,EAAK,EAAL;MACF,gBAAA,CAAiB,OAAjB,EAA0B,CAAC,GAAA,GAAM,EAAP,EAAW,GAAA,GAAM,EAAjB,CAA1B,EAAgD,KAAhD;MACA,kBAAA,CAAmB,SAAnB,EAA8B,KAA9B,EAAqC,CAAC,GAAA,GAAM,EAAP,EAAW,GAAA,GAAM,EAAjB,CAArC,EAA2D,KAA3D;MACA,kBAAA,CAAmB,SAAnB,EAA8B,KAA9B,EAAqC,CAAC,GAAA,GAAM,EAAP,EAAW,GAAA,GAAM,EAAjB,CAArC,EAA2D,KAA3D;IAHF;WAKA,CAAC,OAAD,EAAU,SAAV,EAAqB,SAArB;EAXO;;EAaT,oBAAA,GAAuB,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAC,CAAL,CAAT,EAAkB,CAAC,CAAC,CAAF,EAAK,CAAL,CAAlB,EAA2B,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CAA3B;;EACvB,MAAA,GAAS,QAAA,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAAA;AACP,QAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,SAAA,EAAA,OAAA,EAAA;IAAA,OAAA,GAAU;IACV,SAAA,GAAY;IACZ,SAAA,GAAY;IAEZ,CAAC,GAAD,EAAM,GAAN,CAAA,GAAa;IACb,KAAA,sDAAA;MAAI,CAAC,EAAD,EAAK,EAAL;MACF,IAAA,GAAO,CAAC,GAAD,EAAM,GAAN;AACP,aAAM,IAAN;QACE,IAAA,GAAO,CAAC,IAAK,CAAA,CAAA,CAAL,GAAU,EAAX,EAAe,IAAK,CAAA,CAAA,CAAL,GAAU,EAAzB;QACP,IAAA,CAAa,gBAAA,CAAiB,OAAjB,EAA0B,IAA1B,EAAgC,KAAhC,CAAb;AAAA,gBAAA;;MAFF;MAGA,kBAAA,CAAmB,SAAnB,EAA8B,KAA9B,EAAqC,IAArC,EAA2C,KAA3C;MACA,kBAAA,CAAmB,SAAnB,EAA8B,KAA9B,EAAqC,IAArC,EAA2C,KAA3C;IANF;WAQA,CAAC,OAAD,EAAU,SAAV,EAAqB,SAArB;EAdO;;EAgBT,kBAAA,GAAqB,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAiB,CAAC,CAAC,CAAF,EAAK,CAAL,CAAjB,EAA0B,CAAC,CAAD,EAAI,CAAC,CAAL,CAA1B;;EACrB,IAAA,GAAO,QAAA,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAAA;AACL,QAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,SAAA,EAAA,OAAA,EAAA;IAAA,OAAA,GAAU;IACV,SAAA,GAAY;IACZ,SAAA,GAAY;IAEZ,CAAC,GAAD,EAAM,GAAN,CAAA,GAAa;IACb,KAAA,oDAAA;MAAI,CAAC,EAAD,EAAK,EAAL;MACF,IAAA,GAAO,CAAC,GAAD,EAAM,GAAN;AACP,aAAM,IAAN;QACE,IAAA,GAAO,CAAC,IAAK,CAAA,CAAA,CAAL,GAAU,EAAX,EAAe,IAAK,CAAA,CAAA,CAAL,GAAU,EAAzB;QACP,IAAA,CAAa,gBAAA,CAAiB,OAAjB,EAA0B,IAA1B,EAAgC,KAAhC,CAAb;AAAA,gBAAA;;MAFF;MAGA,kBAAA,CAAmB,SAAnB,EAA8B,KAA9B,EAAqC,IAArC,EAA2C,KAA3C;MACA,kBAAA,CAAmB,SAAnB,EAA8B,KAA9B,EAAqC,IAArC,EAA2C,KAA3C;IANF;WAQA,CAAC,OAAD,EAAU,SAAV,EAAqB,SAArB;EAdK;;EAgBP,KAAA,GAAQ,QAAA,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAAA;AACN,QAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,SAAA,EAAA,GAAA,EAAA,OAAA,EAAA;IAAA,OAAA,GAAU;IACV,SAAA,GAAY;IACZ,SAAA,GAAY;IAEZ,CAAC,GAAD,EAAM,GAAN,CAAA,GAAa;AACb;IAAA,KAAA,qCAAA;MAAI,CAAC,EAAD,EAAK,EAAL;MACF,IAAA,GAAO,CAAC,GAAD,EAAM,GAAN;AACP,aAAM,IAAN;QACE,IAAA,GAAO,CAAC,IAAK,CAAA,CAAA,CAAL,GAAU,EAAX,EAAe,IAAK,CAAA,CAAA,CAAL,GAAU,EAAzB;QACP,IAAA,CAAa,gBAAA,CAAiB,OAAjB,EAA0B,IAA1B,EAAgC,KAAhC,CAAb;AAAA,gBAAA;;MAFF;MAGA,kBAAA,CAAmB,SAAnB,EAA8B,KAA9B,EAAqC,IAArC,EAA2C,KAA3C;MACA,kBAAA,CAAmB,SAAnB,EAA8B,KAA9B,EAAqC,IAArC,EAA2C,KAA3C;IANF;WAQA,CAAC,OAAD,EAAU,SAAV,EAAqB,SAArB;EAdM;;EAgBR,iBAAA,GAAoB,CAClB,CAAC,CAAD,EAAI,CAAJ,CADkB,EACV,CAAC,CAAD,EAAI,CAAJ,CADU,EACF,CAAC,CAAC,CAAF,EAAK,CAAL,CADE,EACO,CAAC,CAAD,EAAI,CAAC,CAAL,CADP,EAElB,CAAC,CAAD,EAAI,CAAJ,CAFkB,EAEV,CAAC,CAAD,EAAI,CAAC,CAAL,CAFU,EAED,CAAC,CAAC,CAAF,EAAK,CAAL,CAFC,EAEQ,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CAFR;;EAKpB,uBAAA,GAA0B;;EAE1B,IAAA,GAAO,QAAA,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAAA;AACL,QAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,GAAA,EAAA,SAAA,EAAA,OAAA,EAAA;IAAA,OAAA,GAAU;IACV,SAAA,GAAY;IACZ,SAAA,GAAY;IAEZ,CAAC,GAAD,EAAM,GAAN,CAAA,GAAa;IACb,KAAA,mDAAA;MAAI,CAAC,EAAD,EAAK,EAAL;MACF,gBAAA,CAAiB,OAAjB,EAA0B,CAAC,GAAA,GAAM,EAAP,EAAW,GAAA,GAAM,EAAjB,CAA1B,EAAgD,KAAhD;MACA,kBAAA,CAAmB,SAAnB,EAA8B,KAA9B,EAAqC,CAAC,GAAA,GAAM,EAAP,EAAW,GAAA,GAAM,EAAjB,CAArC,EAA2D,KAA3D;MACA,kBAAA,CAAmB,SAAnB,EAA8B,KAA9B,EAAqC,CAAC,GAAA,GAAM,EAAP,EAAW,GAAA,GAAM,EAAjB,CAArC,EAA2D,KAA3D;IAHF;WAKA,CAAC,OAAD,EAAU,SAAV,EAAqB,SAArB;EAXK;;EAaP,WAAA,GAAc,QAAA,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,EAAqB,KAArB,CAAA;WACZ,IAAI,CAAC,IAAI,CAAC,UAAW,CAAA,IAAA,CAArB,CAA2B,KAA3B,EAAkC,KAAlC,EAAyC,KAAzC;EADY;;EAGd,MAAM,CAAC,IAAI,CAAC,IAAZ,GAAmB;IACjB,WADiB;IAEjB,WAAA,EAAa;MACX,OAAA,EAAS,EADE;MAEX,SAAA,EAAW,EAFA;MAGX,SAAA,EAAW;IAHA,CAFI;IAOjB,UAAA,EAAY,CACV,IADU,EAEV,UAFU,EAGV,MAHU,EAIV,MAJU,EAKV,IALU,EAMV,KANU,EAOV,IAPU;EAPK;AA5JnB",
  "sourcesContent": [
    "is_in_range = (num, [lower, upper]) ->\r\n  num >= lower and num <= upper\r\n\r\nis_in_board = (coord) ->\r\n  [x, y] = coord\r\n  is_in_range(x, [1, 8]) and is_in_range(y, [1, 8])\r\n\r\nadd_regular_move = (moves, coord, board) ->\r\n  if is_in_board(coord) and not board.is_occupied(coord)\r\n    moves.push coord\r\n    return true\r\n  false\r\n\r\nadd_offensive_move = (moves, color, coord, board) ->\r\n  if is_in_board(coord) and \r\n     board.is_occupied(coord) and \r\n     board.get_piece(coord).color isnt color\r\n    moves.push coord\r\n    return true\r\n  false\r\n\r\nadd_defensive_move = (moves, color, coord, board) ->\r\n  if is_in_board(coord) and \r\n     board.is_occupied(coord) and \r\n     board.get_piece(coord).color is color\r\n    moves.push coord\r\n    return true\r\n  false\r\n\r\npawn = (color, coord, board) ->\r\n  regular = []\r\n  offensive = []\r\n  defensive = []\r\n  \r\n  [col, row] = coord\r\n  starting_row = if color is 'black' then 2 else 7\r\n  orient = if color is 'black' then 1 else -1\r\n  \r\n  if add_regular_move regular, [col, row + orient], board\r\n    add_regular_move regular, [col, row + 2 * orient], board if row is starting_row\r\n  add_offensive_move offensive, color, [col + 1, row + orient], board\r\n  add_offensive_move offensive, color, [col - 1, row + orient], board\r\n  add_defensive_move defensive, color, [col + 1, row + orient], board\r\n  add_defensive_move defensive, color, [col - 1, row + orient], board\r\n  \r\n  {regular, offensive, defensive}\r\n\r\nsuper_pawn_atk_ast_deltas = [\r\n  [1, 1], [1, -1], [-1, 1], [-1, -1]\r\n]\r\n\r\nsuper_pawn = (color, coord, board) ->\r\n  regular = []\r\n  offensive = []\r\n  defensive = []\r\n  \r\n  [col, row] = coord\r\n  for [x, y] in super_pawn_moves_deltas\r\n    add_regular_move regular, [col + x, row + y], board\r\n  for [x, y] in super_pawn_atk_ast_deltas\r\n    add_defensive_move defensive, color, [col + x, row + y], board\r\n    add_offensive_move offensive, color, [col + x, row + y], board\r\n\r\n  {regular, offensive, defensive}\r\n\r\nknight_moves_deltas = [\r\n  [2, 1], [2, -1], [-2, 1], [-2, -1],\r\n  [1, 2], [1, -2], [-1, 2], [-1, -2]\r\n]\r\n\r\nknight = (color, coord, board) ->\r\n  regular = []\r\n  offensive = []\r\n  defensive = []\r\n  \r\n  [col, row] = coord\r\n  for [dx, dy] in knight_moves_deltas\r\n    add_regular_move regular, [col + dx, row + dy], board\r\n    add_offensive_move offensive, color, [col + dx, row + dy], board\r\n    add_defensive_move defensive, color, [col + dx, row + dy], board\r\n    \r\n  {regular, offensive, defensive}\r\n\r\nbishop_moves_orients = [[1, 1], [1, -1], [-1, 1], [-1, -1]]\r\nbishop = (color, coord, board) ->\r\n  regular = []\r\n  offensive = []\r\n  defensive = []\r\n  \r\n  [col, row] = coord\r\n  for [dx, dy] in bishop_moves_orients\r\n    next = [col, row]\r\n    while true\r\n      next = [next[0] + dx, next[1] + dy]\r\n      break unless add_regular_move regular, next, board\r\n    add_offensive_move offensive, color, next, board\r\n    add_defensive_move defensive, color, next, board\r\n    \r\n  {regular, offensive, defensive}\r\n\r\nrook_moves_orients = [[1, 0], [0, 1], [-1, 0], [0, -1]]\r\nrook = (color, coord, board) ->\r\n  regular = []\r\n  offensive = []\r\n  defensive = []\r\n  \r\n  [col, row] = coord\r\n  for [dx, dy] in rook_moves_orients\r\n    next = [col, row]\r\n    while true\r\n      next = [next[0] + dx, next[1] + dy]\r\n      break unless add_regular_move regular, next, board\r\n    add_offensive_move offensive, color, next, board\r\n    add_defensive_move defensive, color, next, board\r\n    \r\n  {regular, offensive, defensive}\r\n  \r\nqueen = (color, coord, board) ->\r\n  regular = []\r\n  offensive = []\r\n  defensive = []\r\n  \r\n  [col, row] = coord\r\n  for [dx, dy] in rook_moves_orients.concat bishop_moves_orients\r\n    next = [col, row]\r\n    while true\r\n      next = [next[0] + dx, next[1] + dy]\r\n      break unless add_regular_move regular, next, board\r\n    add_offensive_move offensive, color, next, board\r\n    add_defensive_move defensive, color, next, board\r\n    \r\n  {regular, offensive, defensive}\r\n\r\nking_moves_deltas = [\r\n  [1, 0], [0, 1], [-1, 0], [0, -1],\r\n  [1, 1], [1, -1], [-1, 1], [-1, -1]\r\n]\r\n\r\nsuper_pawn_moves_deltas = king_moves_deltas\r\n\r\nking = (color, coord, board) ->\r\n  regular = []\r\n  offensive = []\r\n  defensive = []\r\n  \r\n  [col, row] = coord\r\n  for [dx, dy] in king_moves_deltas\r\n    add_regular_move regular, [col + dx, row + dy], board\r\n    add_offensive_move offensive, color, [col + dx, row + dy], board\r\n    add_defensive_move defensive, color, [col + dx, row + dy], board\r\n  \r\n  {regular, offensive, defensive}\r\n\r\nvalid_moves = (type, color, coord, board) ->\r\n  rule.move.strategies[type] color, coord, board\r\n\r\nwindow.rule.move = {\r\n  valid_moves,\r\n  empty_moves: {\r\n    regular: [],\r\n    offensive: [],\r\n    defensive: []\r\n  },\r\n  strategies: {\r\n    pawn,\r\n    super_pawn,\r\n    knight,\r\n    bishop,\r\n    rook,\r\n    queen,\r\n    king\r\n  }\r\n}\r\n"
  ]
}