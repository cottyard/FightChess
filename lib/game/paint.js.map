{
  "version": 3,
  "file": "paint.js",
  "sourceRoot": "..\\..",
  "sources": [
    "src\\game\\paint.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "piece_drawing_types =\r\n  black:\r\n    pawn: '\\u265F'\r\n    super_pawn: '\\u265F'\r\n    knight: '\\u265E'\r\n    bishop: '\\u265D'\r\n    rook: '\\u265C'\r\n    queen: '\\u265B'\r\n    king: '\\u265A'\r\n  white:\r\n    pawn: '\\u2659'\r\n    super_pawn: '\\u2659'\r\n    knight: '\\u2658'\r\n    bishop: '\\u2657'\r\n    rook: '\\u2656'\r\n    queen: '\\u2655'\r\n    king: '\\u2654'\r\n\r\n# indicators\r\n\r\nhp_indicator = (ctx, [pos_x, pos_y], current, total) ->\r\n  half = settings.half_grid_size\r\n  # for hp < 10%, give the red indicator.\r\n  # for hp > 10%, give a gradient color from green to red.\r\n  total = 0.9 * total\r\n  current -= 0.1 * total\r\n  current = 0 if current < 0\r\n  color_offset = Math.floor (total - current) / total * 255 * 2\r\n  red_offset = if color_offset > 255 then 255 else color_offset\r\n  green_offset = color_offset - red_offset\r\n  shape.set_style ctx, \"rgba(#{red_offset}, #{255 - green_offset}, 0, 0.9)\"\r\n  shape.rectangle ctx, pos_x + half - 7, pos_y - half, 7, 7, yes\r\n\r\nmove_cd_indicator = (ctx, [pos_x, pos_y], current, total) ->\r\n  return if current is 0\r\n  percentage = (total - current) / total\r\n  half = settings.half_grid_size\r\n  shape.save_style ctx\r\n  shape.set_style ctx, \"rgba(0, 255, 255, 0.7)\"\r\n  shape.rectangle ctx, pos_x - half, pos_y + half - 3, settings.grid_size * percentage, 4, yes\r\n  shape.restore_style ctx\r\n\r\ndetermine_shield_transparency = (total) ->\r\n  if total <= 1 then 0.4 else \\\r\n  if total <= 3 then 0.5 else \\\r\n  if total <= 7 then 0.6 else \\\r\n  if total <= 13 then 0.7 else \\\r\n  if total <= 21 then 0.8 else 0.9\r\n\r\nshield_indicator = (ctx, [pos_x, pos_y], current, total) ->\r\n  return if total is 0\r\n  half = settings.half_grid_size\r\n  length = settings.grid_size - 7\r\n  percentage = current / total\r\n  cut_length = (1 - percentage) * length\r\n  transparency = determine_shield_transparency total\r\n  x = pos_x - half + cut_length\r\n  y = pos_y - half\r\n  w = length - cut_length\r\n  h = 7\r\n  shape.set_style ctx, shape.style_white\r\n  shape.rectangle ctx, x, y, w, h, yes\r\n  shape.set_style ctx, \"rgba(0, 0, 255, #{transparency})\"\r\n  shape.rectangle ctx, x, y, w, h, yes\r\n\r\n# api\r\n\r\nbackground = (ctx, size) ->\r\n  ctx.save()\r\n  grid_size = settings.grid_size\r\n  shape.set_style ctx, shape.style_brown\r\n  for x in [0...size ] by grid_size\r\n    for y in [0...size ] by grid_size\r\n      if (x + y) / grid_size % 2 isnt 0\r\n        shape.rectangle ctx, x, y, grid_size, grid_size, yes\r\n  ctx.restore()\r\n\r\npiece_at = (ctx, piece, [pos_x, pos_y]) ->\r\n  color = piece.color\r\n  type = piece.type\r\n  half = settings.half_grid_size\r\n  shape.text ctx, piece_drawing_types[color][type],\r\n             pos_x - half + 5, pos_y - half + 40\r\n  shape.save_style ctx\r\n  hp_indicator ctx, [pos_x, pos_y], piece.hp, piece.hp_total\r\n  shield_indicator ctx, [pos_x, pos_y], piece.shield, piece.shield_total\r\n  move_cd_indicator ctx, [pos_x, pos_y], piece.move_cd_ticks, piece.move_cd\r\n  shape.restore_style ctx\r\n\r\nboard = (ctx) ->\r\n  for i in [1..8]\r\n    for j in [1..8]\r\n      continue unless battleground.instance.is_occupied [i, j]\r\n      piece_at ctx, battleground.instance.get_piece([i, j]), calc.coord_to_pos([i, j])\r\n\r\nmark_grid = (ctx, coord, style) ->\r\n  padding = 2\r\n  grid_size = settings.grid_size\r\n  [x, y] = coord\r\n  [x, y] = [(x - 1) * grid_size + padding, (y - 1) * grid_size + padding]\r\n  ctx.save()\r\n  ctx.lineWidth = 1 + (padding - 1) * 2\r\n  shape.set_style ctx, style if style?\r\n  shape.rectangle ctx, x, y, grid_size - 2 * padding, grid_size - 2 * padding\r\n  ctx.restore()\r\n\r\nwindow.paint = {\r\n  background,\r\n  piece_at,\r\n  board,\r\n  mark_grid\r\n}"
  ]
}