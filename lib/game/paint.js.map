{
  "version": 3,
  "file": "paint.js",
  "sourceRoot": "..\\..",
  "sources": [
    "src\\game\\paint.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "piece_drawing_types =\r\n  black:\r\n    pawn: '\\u265F'\r\n    super_pawn: '\\u265F'\r\n    knight: '\\u265E'\r\n    bishop: '\\u265D'\r\n    rook: '\\u265C'\r\n    queen: '\\u265B'\r\n    king: '\\u265A'\r\n  white:\r\n    pawn: '\\u2659'\r\n    super_pawn: '\\u2659'\r\n    knight: '\\u2658'\r\n    bishop: '\\u2657'\r\n    rook: '\\u2656'\r\n    queen: '\\u2655'\r\n    king: '\\u2654'\r\n\r\npiece_super_pawn_decorator = 'S'\r\n\r\n# indicators\r\n\r\nshield_indicator = (ctx, coord, current, total) ->\r\n  transparency = determine_shield_transparency current\r\n  paint_grid ctx, coord, \"rgba(0, 0, 255, #{transparency})\"\r\n  # half = settings.half_grid_size\r\n  # length = settings.grid_size - 7\r\n  # percentage = current / total\r\n  # cut_length = (1 - percentage) * length\r\n  # transparency = determine_shield_transparency total\r\n  # x = pos_x - half + cut_length\r\n  # y = pos_y - half\r\n  # w = length - cut_length\r\n  # h = 7\r\n  # shape.set_style ctx, shape.style_white\r\n  # shape.rectangle ctx, x, y, w, h, yes\r\n  # shape.set_style ctx, \"rgba(0, 0, 255, #{transparency})\"\r\n  # shape.rectangle ctx, x, y, w, h, yes\r\n\r\ndetermine_shield_transparency = (val) ->\r\n  if val >= 20 then 0.5 else val / 40\r\n\r\nhp_indicator = (ctx, [pos_x, pos_y], current, total) ->\r\n  half = settings.half_grid_size\r\n  # for hp < 10%, give the red indicator.\r\n  # for hp > 10%, give a gradient color from green to red.\r\n  total_ = 0.9 * total\r\n  current_ = current\r\n  current_ -= 0.1 * total_\r\n  current_ = 0 if current_ < 0\r\n  color_offset = Math.floor (total_ - current_) / total_ * 255 * 2\r\n  red_offset = if color_offset > 255 then 255 else color_offset\r\n  green_offset = color_offset - red_offset\r\n  # shape.rectangle ctx, pos_x + half - 7, pos_y - half, 7, 7, yes\r\n  half = settings.half_grid_size\r\n  length = settings.grid_size\r\n  percentage = current / total\r\n  cut_length = (1 - percentage) * length\r\n  x = pos_x - half + cut_length\r\n  y = pos_y - half\r\n  w = length - cut_length\r\n  h = settings.top_indicator_height\r\n  # shape.set_style ctx, shape.style_white\r\n  # shape.rectangle ctx, x, y, w, h, yes\r\n  shape.set_style ctx, \"rgba(#{red_offset}, #{255 - green_offset}, 0, 0.9)\"\r\n  shape.rectangle ctx, x, y, w, h, yes\r\n\r\nmove_cd_indicator = (ctx, [pos_x, pos_y], current, total) ->\r\n  return if current is 0\r\n  percentage = (total - current) / total\r\n  half = settings.half_grid_size\r\n  shape.save_style ctx\r\n  shape.set_style ctx, \"rgba(0, 255, 255, 0.7)\"\r\n  shape.rectangle ctx, pos_x - half, pos_y + half - 3, settings.grid_size * percentage, 4, yes\r\n  shape.restore_style ctx\r\n\r\n# api\r\n\r\nbackground = (ctx, size) ->\r\n  ctx.save()\r\n  grid_size = settings.grid_size\r\n  shape.set_style ctx, shape.style_grey\r\n  for x in [0...size ] by grid_size\r\n    for y in [0...size ] by grid_size\r\n      if (x + y) / grid_size % 2 isnt 0\r\n        shape.rectangle ctx, x, y, grid_size, grid_size, yes\r\n  ctx.restore()\r\n\r\npiece_with_indicators = (ctx, piece, coord) ->\r\n  [pos_x, pos_y] = calc.coord_to_pos coord\r\n  piece_at_pos ctx, piece, [pos_x, pos_y]\r\n  shape.save_style ctx\r\n  hp_indicator ctx, [pos_x, pos_y], piece.hp, piece.hp_total\r\n  shield_indicator ctx, coord, piece.shield, piece.shield_total\r\n  move_cd_indicator ctx, [pos_x, pos_y], piece.move_cd_ticks, piece.move_cd\r\n  shape.restore_style ctx\r\n\r\npiece_at_pos = (ctx, piece, [pos_x, pos_y]) ->\r\n  color = piece.color\r\n  type = piece.type\r\n  half = settings.half_grid_size\r\n  style = if piece.can_move() then null else shape.style_light\r\n  shape.text ctx, piece_drawing_types[color][type],\r\n             pos_x - half + 5, pos_y - half + 40, style\r\n  if piece.type is 'super_pawn'\r\n    shape.text ctx, piece_super_pawn_decorator,\r\n               pos_x + 8, pos_y - half + 20, null, \"18px Courier New\"\r\n\r\nboard = (ctx) ->\r\n  for [coord, p] from battleground.instance.all_pieces()\r\n      piece_with_indicators ctx, p, coord\r\n\r\npaint_grid = (ctx, coord, style) ->\r\n  shape.save_style ctx\r\n  shape.set_style ctx, style\r\n  [x, y] = calc.coord_to_pos coord\r\n  shape.rectangle ctx, \\\r\n    x - settings.half_grid_size, y - settings.half_grid_size + settings.top_indicator_height, \\\r\n    settings.grid_size, settings.grid_size - settings.top_indicator_height, yes\r\n  shape.restore_style ctx\r\n\r\nmark_grid = (ctx, coord, style) ->\r\n  padding = 2\r\n  grid_size = settings.grid_size\r\n  [x, y] = coord\r\n  [x, y] = [(x - 1) * grid_size + padding, (y - 1) * grid_size + padding]\r\n  ctx.save()\r\n  ctx.lineWidth = 1 + (padding - 1) * 2\r\n  shape.set_style ctx, style if style?\r\n  shape.rectangle ctx, x, y, grid_size - 2 * padding, grid_size - 2 * padding\r\n  ctx.restore()\r\n\r\nwindow.paint = {\r\n  background,\r\n  piece_at_pos,\r\n  board,\r\n  paint_grid,\r\n  mark_grid\r\n}"
  ]
}