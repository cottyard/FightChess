// Generated by CoffeeScript 1.8.0
(function() {
  var Board, get_state, init, on_render, set_state;

  Board = (function() {
    var piece_arrangement;

    piece_arrangement = ['rook', 'knight', 'bishop', 'queen', 'king', 'bishop', 'knight', 'rook'];

    function Board() {
      var i, j, x, _i, _j;
      this.board = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 1; _i <= 8; i = ++_i) {
          _results.push((function() {
            var _j, _results1;
            _results1 = [];
            for (j = _j = 1; _j <= 8; j = ++_j) {
              _results1.push(null);
            }
            return _results1;
          })());
        }
        return _results;
      })();
      for (x = _i = 1; _i <= 8; x = ++_i) {
        this.place_piece(new piece.Piece('white', 'pawn', [x, 7]));
        this.place_piece(new piece.Piece('white', piece_arrangement[x - 1], [x, 8]));
      }
      for (x = _j = 1; _j <= 8; x = ++_j) {
        this.place_piece(new piece.Piece('black', 'pawn', [x, 2]));
        this.place_piece(new piece.Piece('black', piece_arrangement[x - 1], [x, 1]));
      }
    }

    Board.prototype.is_occupied = function(_arg) {
      var coord_x, coord_y;
      coord_x = _arg[0], coord_y = _arg[1];
      return this.board[coord_x - 1][coord_y - 1] != null;
    };

    Board.prototype.get_piece = function(_arg) {
      var coord_x, coord_y;
      coord_x = _arg[0], coord_y = _arg[1];
      return this.board[coord_x - 1][coord_y - 1];
    };

    Board.prototype.lift_piece = function(_arg) {
      var coord_x, coord_y;
      coord_x = _arg[0], coord_y = _arg[1];
      return this.board[coord_x - 1][coord_y - 1] = null;
    };

    Board.prototype.place_piece = function(piece) {
      var coord_x, coord_y, _ref;
      _ref = piece.coordinate, coord_x = _ref[0], coord_y = _ref[1];
      return this.board[coord_x - 1][coord_y - 1] = piece;
    };

    return Board;

  })();

  init = function() {
    board.instance = new Board();
    return ev.hook('render', on_render);
  };

  on_render = function(evt) {
    return paint.board(ui.ctx["static"]);
  };

  get_state = function() {
    return calc.to_string(board.instance);
  };

  set_state = function(str) {
    var p, pieces, _i, _len, _ref, _results;
    board.instance = calc.from_string(str);
    calc.set_type(board.instance, Board);
    _ref = board.instance.board;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pieces = _ref[_i];
      _results.push((function() {
        var _j, _len1, _results1;
        _results1 = [];
        for (_j = 0, _len1 = pieces.length; _j < _len1; _j++) {
          p = pieces[_j];
          if (p != null) {
            _results1.push(calc.set_type(p, piece.Piece));
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      })());
    }
    return _results;
  };

  window.board = {
    init: init,
    instance: null,
    get_state: get_state,
    set_state: set_state
  };

}).call(this);
