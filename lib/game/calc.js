// Generated by CoffeeScript 2.2.1
(function() {
  var arraybuffer_to_obj, clone, coord_equal, coord_one_of, coord_to_pos, copy_array, from_string, get_segment_angle, hoop, obj_to_arraybuffer, pick_one, pos_to_coord, randint, read_from_buffer, remove_item_from_array, set_type, shrink_segment, sum_byte_spec_size, to_string, unwrap_float_from_arraybuffer, wrap_float_for_arraybuffer, write_to_buffer;

  clone = function(obj) {
    var c, i;
    c = {};
    for (i in obj) {
      if ((typeof obj[i] === "object") && (obj[i] !== null)) {
        c[i] = clone(obj[i]);
      } else {
        c[i] = obj[i];
      }
    }
    return c;
  };

  wrap_float_for_arraybuffer = function(num, precision = 0.1) {
    return Math.floor(num * (1 / precision));
  };

  unwrap_float_from_arraybuffer = function(num, precision = 0.1) {
    return num / (1 / precision);
  };

  write_to_buffer = function(buffer, pos, bytes, content) {
    var constructor, view;
    constructor = bytes === 1 ? Uint8Array : Uint16Array;
    view = new constructor(buffer, pos, 1);
    return view[0] = content;
  };

  read_from_buffer = function(buffer, pos, bytes) {
    var constructor, view;
    constructor = bytes === 1 ? Uint8Array : Uint16Array;
    view = new constructor(buffer, pos, 1);
    return view[0];
  };

  sum_byte_spec_size = function(byte_spec) {
    var attr, total_bytes;
    total_bytes = 0;
    for (attr in byte_spec) {
      total_bytes += byte_spec[attr];
    }
    return total_bytes;
  };

  obj_to_arraybuffer = function(obj, byte_spec) {
    var attr, buffer, byte_count;
    buffer = new ArrayBuffer(sum_byte_spec_size(byte_spec));
    byte_count = 0;
    for (attr in byte_spec) {
      write_to_buffer(buffer, byte_count, byte_spec[attr], obj[attr]);
      byte_count += byte_spec[attr];
    }
    return buffer;
  };

  arraybuffer_to_obj = function(buffer, byte_spec) {
    var attr, byte_count, content, obj;
    obj = {};
    byte_count = 0;
    for (attr in byte_spec) {
      content = read_from_buffer(buffer, byte_count, byte_spec[attr]);
      obj[attr] = content;
      byte_count += byte_spec[attr];
    }
    return obj;
  };

  to_string = function(obj) {
    return JSON.stringify(obj);
  };

  from_string = function(str) {
    return JSON.parse(str);
  };

  set_type = function(obj, type) {
    obj.__proto__ = type.prototype;
    return obj;
  };

  copy_array = function(arr) {
    return arr.slice(0);
  };

  remove_item_from_array = function(item, arr) {
    var index;
    index = arr.indexOf(item);
    if (index !== -1) {
      return arr.splice(index, 1);
    }
  };

  randint = function([lower, upper]) {
    return Math.floor((Math.random() * (upper - lower + 1)) + lower);
  };

  pick_one = function(list) {
    return list[calc.randint([0, list.length - 1])];
  };

  shrink_segment = function(point_from, point_to, length = 15) {
    var angle, dx, dy, to_x, to_y, x, y;
    [x, y] = point_from;
    [to_x, to_y] = point_to;
    angle = get_segment_angle(x, y, to_x, to_y);
    dx = length * Math.sin(angle);
    dy = length * Math.cos(angle);
    x += dx;
    y -= dy;
    to_x -= dx;
    to_y += dy;
    return [[x, y], [to_x, to_y]];
  };

  get_segment_angle = function(x, y, to_x, to_y) {
    var angle, delta_x, delta_y;
    delta_x = to_x - x;
    delta_y = to_y - y;
    if (delta_x === 0) {
      angle = delta_y > 0 ? Math.PI : 0;
    } else {
      angle = Math.atan(delta_y / delta_x);
      if (delta_x < 0) {
        angle -= Math.PI / 2;
      } else {
        angle += Math.PI / 2;
      }
    }
    return angle;
  };

  hoop = function(num, [range_lower, range_upper]) {
    if (num < range_lower) {
      num = range_lower;
    }
    if (num > range_upper) {
      num = range_upper;
    }
    return num;
  };

  coord_to_pos = function([x, y]) {
    var pos_x, pos_y;
    pos_x = settings.grid_size * (x - 0.5);
    pos_y = settings.grid_size * (y - 0.5);
    return [pos_x, pos_y];
  };

  pos_to_coord = function([x, y]) {
    var coord_x, coord_y;
    coord_x = hoop(Math.floor(x / settings.grid_size) + 1, [1, 8]);
    coord_y = hoop(Math.floor(y / settings.grid_size) + 1, [1, 8]);
    return [coord_x, coord_y];
  };

  coord_equal = function(coord_1, coord_2) {
    return coord_1[0] === coord_2[0] && coord_1[1] === coord_2[1];
  };

  coord_one_of = function(coord, coord_list) {
    var c, j, len;
    for (j = 0, len = coord_list.length; j < len; j++) {
      c = coord_list[j];
      if (coord_equal(coord, c)) {
        return true;
      }
    }
    return false;
  };

  window.calc = {coord_to_pos, pos_to_coord, coord_equal, coord_one_of, get_segment_angle, shrink_segment, randint, pick_one, remove_item_from_array, copy_array, to_string, from_string, set_type, obj_to_arraybuffer, arraybuffer_to_obj, wrap_float_for_arraybuffer, unwrap_float_from_arraybuffer, clone};

}).call(this);
