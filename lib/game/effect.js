// Generated by CoffeeScript 1.8.0
(function() {
  var Assist, Attack, Hurt, assist_byte_spec, attack_byte_spec, effects_assist, effects_attack, effects_hurt, get_state, hurt_byte_spec, init, on_battle_assist, on_battle_attack, on_piece_hurt, render_all, render_effects, set_state;

  Assist = (function() {
    function Assist(coord_from, coord_to) {
      this.coord_from = coord_from;
      this.coord_to = coord_to;
    }

    Assist.prototype.render = function(ctx) {
      var to_x, to_y, x, y, _ref, _ref1, _ref2;
      _ref = calc.shrink_segment(calc.coord_to_pos(this.coord_from), calc.coord_to_pos(this.coord_to)), (_ref1 = _ref[0], x = _ref1[0], y = _ref1[1]), (_ref2 = _ref[1], to_x = _ref2[0], to_y = _ref2[1]);
      shape.save_style(ctx);
      shape.set_style(ctx, shape.style_blue_tp);
      shape.arrow(ctx, x, y, to_x, to_y);
      return shape.restore_style(ctx);
    };

    Assist.prototype.next_frame = function() {
      return false;
    };

    return Assist;

  })();

  Attack = (function() {
    function Attack(coord_from, coord_to) {
      this.coord_from = coord_from;
      this.coord_to = coord_to;
      this.transparency = 1;
    }

    Attack.prototype.render = function(ctx) {
      var to_x, to_y, x, y, _ref, _ref1, _ref2;
      _ref = calc.shrink_segment(calc.coord_to_pos(this.coord_from), calc.coord_to_pos(this.coord_to)), (_ref1 = _ref[0], x = _ref1[0], y = _ref1[1]), (_ref2 = _ref[1], to_x = _ref2[0], to_y = _ref2[1]);
      shape.save_style(ctx);
      shape.set_style(ctx, "rgba(255, 0, 0, " + this.transparency + ")");
      ctx.lineWidth = 3;
      shape.arrow(ctx, x, y, to_x, to_y, 10);
      return shape.restore_style(ctx);
    };

    Attack.prototype.next_frame = function() {
      this.transparency -= 0.2;
      if (this.transparency >= 0.2) {
        return true;
      } else {
        return false;
      }
    };

    return Attack;

  })();

  Hurt = (function() {
    function Hurt(coord) {
      this.coord = coord;
      this.transparency = 0.3;
    }

    Hurt.prototype.render = function(ctx) {
      var x, y, _ref;
      shape.save_style(ctx);
      shape.set_style(ctx, "rgba(255, 0, 0, " + this.transparency + ")");
      _ref = calc.coord_to_pos(this.coord), x = _ref[0], y = _ref[1];
      shape.rectangle(ctx, x - settings.half_grid_size, y - settings.half_grid_size, settings.grid_size, settings.grid_size, true);
      return shape.restore_style(ctx);
    };

    Hurt.prototype.next_frame = function() {
      this.transparency -= 0.1;
      if (this.transparency >= 0.1) {
        return true;
      } else {
        return false;
      }
    };

    return Hurt;

  })();

  effects_assist = [];

  effects_attack = [];

  effects_hurt = [];

  on_battle_assist = function(evt) {
    return effects_assist.push(new Assist(evt.coord_from, evt.coord_to));
  };

  on_battle_attack = function(evt) {
    return effects_attack.push(new Attack(evt.coord_from, evt.coord_to));
  };

  on_piece_hurt = function(evt) {
    return effects_hurt.push(new Hurt(evt.coord));
  };

  render_effects = function(ctx, effects) {
    var e, i, to_be_continued, _i, _len;
    for (i = _i = 0, _len = effects.length; _i < _len; i = ++_i) {
      e = effects[i];
      e.render(ctx);
      to_be_continued = e.next_frame();
      if (!to_be_continued) {
        effects[i] = null;
      }
    }
    return effects.filter(function(e) {
      return e != null;
    });
  };

  render_all = function() {
    var ctx;
    ctx = ui.ctx["static"];
    effects_assist = render_effects(ctx, effects_assist);
    effects_attack = render_effects(ctx, effects_attack);
    return effects_hurt = render_effects(ctx, effects_hurt);
  };

  init = function() {
    ev.hook('battle_assist', on_battle_assist);
    ev.hook('battle_attack', on_battle_attack);
    ev.hook('piece_hurt', on_piece_hurt);
    return ev.hook('render', render_all);
  };

  assist_byte_spec = {
    from_x: 1,
    from_y: 1,
    to_x: 1,
    to_y: 1
  };

  attack_byte_spec = {
    from_x: 1,
    from_y: 1,
    to_x: 1,
    to_y: 1,
    tp: 1
  };

  hurt_byte_spec = {
    x: 1,
    y: 1,
    tp: 1
  };

  get_state = function() {
    var e, e_obj, serialized_assist, serialized_attack, serialized_hurt, _i, _j, _k, _len, _len1, _len2;
    serialized_assist = [];
    for (_i = 0, _len = effects_assist.length; _i < _len; _i++) {
      e = effects_assist[_i];
      e_obj = {
        from_x: e.coord_from[0],
        from_y: e.coord_from[1],
        to_x: e.coord_to[0],
        to_y: e.coord_to[1]
      };
      serialized_assist.push(calc.obj_to_arraybuffer(e_obj, assist_byte_spec));
    }
    serialized_attack = [];
    for (_j = 0, _len1 = effects_attack.length; _j < _len1; _j++) {
      e = effects_attack[_j];
      e_obj = {
        from_x: e.coord_from[0],
        from_y: e.coord_from[1],
        to_x: e.coord_to[0],
        to_y: e.coord_to[1],
        tp: Math.floor(e.transparency * 10)
      };
      serialized_attack.push(calc.obj_to_arraybuffer(e_obj, attack_byte_spec));
    }
    serialized_hurt = [];
    for (_k = 0, _len2 = effects_hurt.length; _k < _len2; _k++) {
      e = effects_hurt[_k];
      e_obj = {
        x: e.coord[0],
        y: e.coord[1],
        tp: Math.floor(e.transparency * 10)
      };
      serialized_hurt.push(calc.obj_to_arraybuffer(e_obj, hurt_byte_spec));
    }
    return {
      assist: serialized_assist,
      attack: serialized_attack,
      hurt: serialized_hurt
    };
  };

  set_state = function(state) {
    var atk, e_obj, hrt, se, serialized_assist, serialized_attack, serialized_hurt, _i, _j, _k, _len, _len1, _len2, _results;
    serialized_assist = state.assist;
    effects_assist = [];
    for (_i = 0, _len = serialized_assist.length; _i < _len; _i++) {
      se = serialized_assist[_i];
      e_obj = calc.arraybuffer_to_obj(se, assist_byte_spec);
      effects_assist.push(new Assist([e_obj.from_x, e_obj.from_y], [e_obj.to_x, e_obj.to_y]));
    }
    serialized_attack = state.attack;
    effects_attack = [];
    for (_j = 0, _len1 = serialized_attack.length; _j < _len1; _j++) {
      se = serialized_attack[_j];
      e_obj = calc.arraybuffer_to_obj(se, attack_byte_spec);
      atk = new Attack([e_obj.from_x, e_obj.from_y], [e_obj.to_x, e_obj.to_y]);
      atk.transparency = e_obj.tp / 10;
      effects_attack.push(atk);
    }
    serialized_hurt = state.hurt;
    effects_hurt = [];
    _results = [];
    for (_k = 0, _len2 = serialized_hurt.length; _k < _len2; _k++) {
      se = serialized_hurt[_k];
      e_obj = calc.arraybuffer_to_obj(se, hurt_byte_spec);
      hrt = new Hurt([e_obj.x, e_obj.y]);
      hrt.transparency = e_obj.tp / 10;
      _results.push(effects_hurt.push(hrt));
    }
    return _results;
  };

  window.effect = {
    init: init,
    get_state: get_state,
    set_state: set_state
  };

}).call(this);
