// Generated by CoffeeScript 2.2.1
(function() {
  var Assist, Attack, Hurt, assist_serial_attrs, attack_serial_attrs, effects_assist, effects_attack, effects_hurt, get_obj, get_state, hurt_serial_attrs, init, on_battle_assist, on_battle_attack, on_piece_hurt, render_all, render_effects, set_state;

  Assist = class Assist {
    constructor(coord_from, coord_to) {
      this.coord_from = coord_from;
      this.coord_to = coord_to;
    }

    render(ctx) {
      var to_x, to_y, x, y;
      [[x, y], [to_x, to_y]] = calc.shrink_segment(calc.coord_to_pos(this.coord_from), calc.coord_to_pos(this.coord_to));
      shape.save_style(ctx);
      shape.set_style(ctx, shape.style_blue_tp);
      shape.arrow(ctx, x, y, to_x, to_y);
      return shape.restore_style(ctx);
    }

    next_frame() {
      return false;
    }

  };

  Attack = class Attack {
    constructor(coord_from, coord_to) {
      this.coord_from = coord_from;
      this.coord_to = coord_to;
      this.transparency = 1;
    }

    render(ctx) {
      var to_x, to_y, x, y;
      [[x, y], [to_x, to_y]] = calc.shrink_segment(calc.coord_to_pos(this.coord_from), calc.coord_to_pos(this.coord_to));
      shape.save_style(ctx);
      shape.set_style(ctx, `rgba(255, 0, 0, ${this.transparency})`);
      ctx.lineWidth = 3;
      shape.arrow(ctx, x, y, to_x, to_y, 10);
      return shape.restore_style(ctx);
    }

    next_frame() {
      this.transparency -= 0.2;
      if (this.transparency >= 0.2) {
        return true;
      } else {
        return false;
      }
    }

  };

  Hurt = class Hurt {
    constructor(coord) {
      this.coord = coord;
      this.transparency = 0.3;
    }

    render(ctx) {
      return paint.paint_grid(ctx, this.coord, `rgba(255, 0, 0, ${this.transparency})`);
    }

    next_frame() {
      this.transparency -= 0.1;
      if (this.transparency >= 0.1) {
        return true;
      } else {
        return false;
      }
    }

  };

  effects_assist = [];

  effects_attack = [];

  effects_hurt = [];

  on_battle_assist = function(evt) {
    return effects_assist.push(new Assist(evt.coord_from, evt.coord_to));
  };

  on_battle_attack = function(evt) {
    return effects_attack.push(new Attack(evt.coord_from, evt.coord_to));
  };

  on_piece_hurt = function(evt) {
    return effects_hurt.push(new Hurt(evt.coord));
  };

  render_effects = function(ctx, effects) {
    var e, i, j, len, to_be_continued;
    for (i = j = 0, len = effects.length; j < len; i = ++j) {
      e = effects[i];
      e.render(ctx);
      to_be_continued = e.next_frame();
      if (!to_be_continued) {
        effects[i] = null;
      }
    }
    return effects.filter(function(e) {
      return e != null;
    });
  };

  render_all = function() {
    var ctx;
    ctx = ui.ctx.static;
    effects_assist = render_effects(ctx, effects_assist);
    effects_attack = render_effects(ctx, effects_attack);
    return effects_hurt = render_effects(ctx, effects_hurt);
  };

  init = function() {
    ev.hook('battle_assist', on_battle_assist);
    ev.hook('battle_attack', on_battle_attack);
    ev.hook('piece_hurt', on_piece_hurt);
    return ev.hook('render', render_all);
  };

  assist_serial_attrs = ['from_x', 'from_y', 'to_x', 'to_y'];

  attack_serial_attrs = ['from_x', 'from_y', 'to_x', 'to_y', 'tp'];

  hurt_serial_attrs = ['x', 'y', 'tp'];

  get_obj = function(attrs) {
    var a, j, len, o;
    o = {};
    for (j = 0, len = attrs.length; j < len; j++) {
      a = attrs[j];
      o[a] = null;
    }
    return o;
  };

  get_state = function() {
    var e, e_obj, j, k, l, len, len1, len2, serialized_assist, serialized_attack, serialized_hurt;
    serialized_assist = [];
    for (j = 0, len = effects_assist.length; j < len; j++) {
      e = effects_assist[j];
      e_obj = {
        from_x: e.coord_from[0],
        from_y: e.coord_from[1],
        to_x: e.coord_to[0],
        to_y: e.coord_to[1]
      };
      serialized_assist.push(calc.obj_to_arraybuffer(e_obj));
    }
    serialized_attack = [];
    for (k = 0, len1 = effects_attack.length; k < len1; k++) {
      e = effects_attack[k];
      e_obj = {
        from_x: e.coord_from[0],
        from_y: e.coord_from[1],
        to_x: e.coord_to[0],
        to_y: e.coord_to[1],
        tp: Math.floor(e.transparency * 10)
      };
      serialized_attack.push(calc.obj_to_arraybuffer(e_obj));
    }
    serialized_hurt = [];
    for (l = 0, len2 = effects_hurt.length; l < len2; l++) {
      e = effects_hurt[l];
      e_obj = {
        x: e.coord[0],
        y: e.coord[1],
        tp: Math.floor(e.transparency * 10)
      };
      serialized_hurt.push(calc.obj_to_arraybuffer(e_obj));
    }
    return {
      assist: serialized_assist,
      attack: serialized_attack,
      hurt: serialized_hurt
    };
  };

  set_state = function(state) {
    var atk, e_obj, hrt, j, k, l, len, len1, len2, results, se, serialized_assist, serialized_attack, serialized_hurt;
    serialized_assist = state.assist;
    effects_assist = [];
    for (j = 0, len = serialized_assist.length; j < len; j++) {
      se = serialized_assist[j];
      e_obj = get_obj(assist_serial_attrs);
      calc.arraybuffer_to_obj(se, e_obj);
      effects_assist.push(new Assist([e_obj.from_x, e_obj.from_y], [e_obj.to_x, e_obj.to_y]));
    }
    serialized_attack = state.attack;
    effects_attack = [];
    for (k = 0, len1 = serialized_attack.length; k < len1; k++) {
      se = serialized_attack[k];
      e_obj = get_obj(attack_serial_attrs);
      calc.arraybuffer_to_obj(se, e_obj);
      atk = new Attack([e_obj.from_x, e_obj.from_y], [e_obj.to_x, e_obj.to_y]);
      atk.transparency = e_obj.tp / 10;
      effects_attack.push(atk);
    }
    serialized_hurt = state.hurt;
    effects_hurt = [];
    results = [];
    for (l = 0, len2 = serialized_hurt.length; l < len2; l++) {
      se = serialized_hurt[l];
      e_obj = get_obj(hurt_serial_attrs);
      calc.arraybuffer_to_obj(se, e_obj);
      hrt = new Hurt([e_obj.x, e_obj.y]);
      hrt.transparency = e_obj.tp / 10;
      results.push(effects_hurt.push(hrt));
    }
    return results;
  };

  window.effect = {init, get_state, set_state};

}).call(this);

//# sourceMappingURL=effect.js.map
