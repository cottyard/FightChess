// Generated by CoffeeScript 2.2.1
(function() {
  // piece move preview
  var abort_preview, default_pick_condition, hovering_coord, init, last_mouse_position, launch_preview, on_drop, on_hover, on_mousedown, on_mousemove, on_mouseup, on_pick, paint_previewing_piece, pick_condition, preview, preview_condition, previewing, previewing_coord, previewing_piece, set_color, update_mouse_position, view_info, view_info_coord;

  previewing = false;

  previewing_piece = null;

  previewing_coord = [-1, -1];

  preview_condition = function() {
    return board.instance.is_occupied(previewing_coord) && piece.piece_equal(board.instance.get_piece(previewing_coord), previewing_piece);
  };

  preview = function(evt) {
    var i, j, k, len, len1, len2, mo, moves, mr, ref, ref1, ref2, results;
    if (!preview_condition()) {
      abort_preview();
      return;
    }
    paint.mark_grid(ui.ctx.static, previewing_coord);
    moves = previewing_piece.valid_moves();
    ref = moves.regular;
    for (i = 0, len = ref.length; i < len; i++) {
      mr = ref[i];
      paint.mark_grid(ui.ctx.static, mr, shape.style_green_tp);
    }
    ref1 = moves.offensive;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      mo = ref1[j];
      paint.mark_grid(ui.ctx.static, mo, shape.style_red_tp);
    }
    ref2 = moves.defensive;
    results = [];
    for (k = 0, len2 = ref2.length; k < len2; k++) {
      mo = ref2[k];
      results.push(paint.mark_grid(ui.ctx.static, mo, shape.style_blue_tp));
    }
    return results;
  };

  abort_preview = function() {
    ev.unhook('render', preview);
    ev.unhook('render', paint_previewing_piece);
    ev.unhook('mousemove', paint_previewing_piece);
    shape.clear_canvas(ui.ctx.animate);
    return previewing = false;
  };

  launch_preview = function() {
    ev.hook('render', preview);
    ev.hook('render', paint_previewing_piece);
    ev.hook('mousemove', paint_previewing_piece);
    return previewing = true;
  };

  last_mouse_position = null;

  update_mouse_position = function(evt) {
    return last_mouse_position = evt.pos;
  };

  paint_previewing_piece = function(evt) {
    if (!preview_condition()) {
      return;
    }
    shape.clear_canvas(ui.ctx.animate);
    shape.set_style(ui.ctx.animate, shape.style_tp);
    paint.piece_at(ui.ctx.animate, previewing_piece, last_mouse_position);
    return ui.cvs.animate.style.cursor = "pointer";
  };

  // view piece info
  view_info_coord = [1, 1];

  view_info = function(evt) {
    var cursor;
    cursor = "auto";
    if (board.instance.is_occupied(view_info_coord)) {
      ui.info.value = board.instance.get_piece(view_info_coord).info();
      if (pick_condition.check(view_info_coord)) {
        cursor = "pointer";
      }
    } else {
      ui.info.value = '';
    }
    return ui.cvs.animate.style.cursor = cursor;
  };

  // input operation handlers
  default_pick_condition = function(coord) {
    return board.instance.is_occupied(coord) && board.instance.get_piece(coord).can_move();
  };

  pick_condition = {
    check: default_pick_condition
  };

  set_color = function(color) {
    if (color == null) {
      return pick_condition = default_pick_condition;
    } else {
      return pick_condition.check = function(coord) {
        return default_pick_condition(coord) && board.instance.get_piece(coord).color === color;
      };
    }
  };

  on_pick = function(evt) {
    if (!pick_condition.check(evt.coord)) {
      return;
    }
    previewing_piece = board.instance.get_piece(evt.coord);
    previewing_coord = evt.coord;
    return launch_preview();
  };

  on_drop = function(evt) {
    var moves;
    if (!previewing) {
      return;
    }
    moves = previewing_piece.valid_moves().regular;
    if (calc.coord_one_of(evt.coord, moves)) {
      ev.trigger('op_movepiece', {
        piece: previewing_piece,
        coord_to: evt.coord
      });
    }
    return abort_preview();
  };

  on_hover = function(evt) {
    return view_info_coord = evt.coord;
  };

  // raw input handlers, raw input -> input operation
  on_mousedown = function(evt) {
    var coord;
    coord = calc.pos_to_coord(evt.pos);
    return ev.trigger('pick', {coord});
  };

  on_mouseup = function(evt) {
    var coord;
    coord = calc.pos_to_coord(evt.pos);
    return ev.trigger('drop', {coord});
  };

  hovering_coord = [-1, -1];

  on_mousemove = function(evt) {
    var coord;
    coord = calc.pos_to_coord(evt.pos);
    if (!calc.coord_equal(hovering_coord, coord)) {
      ev.trigger('hover', {coord});
    }
    return hovering_coord = coord;
  };

  init = function() {
    ev.hook('mousedown', on_mousedown);
    ev.hook('mouseup', on_mouseup);
    ev.hook('mousemove', on_mousemove);
    ev.hook('mousemove', update_mouse_position);
    ev.hook('pick', on_pick);
    ev.hook('drop', on_drop);
    ev.hook('hover', on_hover);
    return ev.hook('render', view_info);
  };

  window.preview = {init, set_color};

}).call(this);
