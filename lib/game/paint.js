// Generated by CoffeeScript 2.2.1
(function() {
  var background, board, determine_shield_transparency, hp_indicator, mark_grid, move_cd_indicator, piece_at, piece_drawing_types, shield_indicator;

  piece_drawing_types = {
    black: {
      pawn: '\u265F',
      super_pawn: '\u265F',
      knight: '\u265E',
      bishop: '\u265D',
      rook: '\u265C',
      queen: '\u265B',
      king: '\u265A'
    },
    white: {
      pawn: '\u2659',
      super_pawn: '\u2659',
      knight: '\u2658',
      bishop: '\u2657',
      rook: '\u2656',
      queen: '\u2655',
      king: '\u2654'
    }
  };

  // indicators
  hp_indicator = function(ctx, [pos_x, pos_y], current, total) {
    var color_offset, green_offset, half, red_offset;
    half = settings.half_grid_size;
    // for hp < 10%, give the red indicator.
    // for hp > 10%, give a gradient color from green to red.
    total = 0.9 * total;
    current -= 0.1 * total;
    if (current < 0) {
      current = 0;
    }
    color_offset = Math.floor((total - current) / total * 255 * 2);
    red_offset = color_offset > 255 ? 255 : color_offset;
    green_offset = color_offset - red_offset;
    shape.set_style(ctx, `rgba(${red_offset}, ${255 - green_offset}, 0, 0.9)`);
    return shape.rectangle(ctx, pos_x + half - 7, pos_y - half, 7, 7, true);
  };

  move_cd_indicator = function(ctx, [pos_x, pos_y], current, total) {
    var half, percentage;
    if (current === 0) {
      return;
    }
    percentage = (total - current) / total;
    half = settings.half_grid_size;
    shape.save_style(ctx);
    shape.set_style(ctx, "rgba(0, 255, 255, 0.7)");
    shape.rectangle(ctx, pos_x - half, pos_y + half - 3, settings.grid_size * percentage, 4, true);
    return shape.restore_style(ctx);
  };

  determine_shield_transparency = function(total) {
    if (total <= 1) {
      return 0.4;
    } else if (total <= 3) {
      return 0.5;
    } else if (total <= 7) {
      return 0.6;
    } else if (total <= 13) {
      return 0.7;
    } else if (total <= 21) {
      return 0.8;
    } else {
      return 0.9;
    }
  };

  shield_indicator = function(ctx, [pos_x, pos_y], current, total) {
    var cut_length, h, half, length, percentage, transparency, w, x, y;
    if (total === 0) {
      return;
    }
    half = settings.half_grid_size;
    length = settings.grid_size - 7;
    percentage = current / total;
    cut_length = (1 - percentage) * length;
    transparency = determine_shield_transparency(total);
    x = pos_x - half + cut_length;
    y = pos_y - half;
    w = length - cut_length;
    h = 7;
    shape.set_style(ctx, shape.style_white);
    shape.rectangle(ctx, x, y, w, h, true);
    shape.set_style(ctx, `rgba(0, 0, 255, ${transparency})`);
    return shape.rectangle(ctx, x, y, w, h, true);
  };

  // api
  background = function(ctx, size) {
    var grid_size, k, l, ref, ref1, ref2, ref3, x, y;
    ctx.save();
    grid_size = settings.grid_size;
    shape.set_style(ctx, shape.style_brown);
    for (x = k = 0, ref = size, ref1 = grid_size; ref1 !== 0 && (0 <= ref ? 0 <= k && k < ref : 0 >= k && k > ref); x = k += ref1) {
      for (y = l = 0, ref2 = size, ref3 = grid_size; ref3 !== 0 && (0 <= ref2 ? 0 <= l && l < ref2 : 0 >= l && l > ref2); y = l += ref3) {
        if ((x + y) / grid_size % 2 !== 0) {
          shape.rectangle(ctx, x, y, grid_size, grid_size, true);
        }
      }
    }
    return ctx.restore();
  };

  piece_at = function(ctx, piece, [pos_x, pos_y]) {
    var color, half, type;
    color = piece.color;
    type = piece.type;
    half = settings.half_grid_size;
    shape.text(ctx, piece_drawing_types[color][type], pos_x - half + 5, pos_y - half + 40);
    shape.save_style(ctx);
    hp_indicator(ctx, [pos_x, pos_y], piece.hp, piece.hp_total);
    shield_indicator(ctx, [pos_x, pos_y], piece.shield, piece.shield_total);
    move_cd_indicator(ctx, [pos_x, pos_y], piece.move_cd_ticks, piece.move_cd);
    return shape.restore_style(ctx);
  };

  board = function(ctx) {
    var i, j, k, results;
    results = [];
    for (i = k = 1; k <= 8; i = ++k) {
      results.push((function() {
        var l, results1;
        results1 = [];
        for (j = l = 1; l <= 8; j = ++l) {
          if (!window.board.instance.is_occupied([i, j])) {
            continue;
          }
          results1.push(piece_at(ctx, window.board.instance.get_piece([i, j]), calc.coord_to_pos([i, j])));
        }
        return results1;
      })());
    }
    return results;
  };

  mark_grid = function(ctx, coord, style) {
    var grid_size, padding, x, y;
    padding = 2;
    grid_size = settings.grid_size;
    [x, y] = coord;
    [x, y] = [(x - 1) * grid_size + padding, (y - 1) * grid_size + padding];
    ctx.save();
    ctx.lineWidth = 1 + (padding - 1) * 2;
    if (style != null) {
      shape.set_style(ctx, style);
    }
    shape.rectangle(ctx, x, y, grid_size - 2 * padding, grid_size - 2 * padding);
    return ctx.restore();
  };

  window.paint = {background, piece_at, board, mark_grid};

}).call(this);
