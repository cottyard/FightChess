// Generated by CoffeeScript 2.2.1
(function() {
  var assert, board_test, compare_boards, compare_pieces, piece_test, test;

  test = function() {
    piece_test();
    return board_test();
  };

  board_test = function() {
    var b, b0, sb;
    b0 = new board.Board();
    b0.set_out_board();
    sb = board.serialize(b0);
    b = new board.Board();
    board.deserialize(sb, b);
    compare_boards(b, b0);
    return console.log('board test passed');
  };

  compare_boards = function(b, b0) {
    var i, j, k, l, o, o0;
    for (i = k = 1; k <= 8; i = ++k) {
      for (j = l = 1; l <= 8; j = ++l) {
        o = b.is_occupied([i, j]);
        o0 = b0.is_occupied([i, j]);
        assert(o, o0, 'occupied #{i}, #{j}');
        if (o) {
          compare_pieces(b.get_piece([i, j]), b0.get_piece([i, j]));
        }
      }
    }
    assert(b.spawn_cd['white'], b0.spawn_cd['white'], 'spawn cd white');
    return assert(b.spawn_cd['black'], b0.spawn_cd['black'], 'spawn cd black');
  };

  piece_test = function() {
    var p, pd, sp, x, y;
    p = new piece.Piece('white', 'king');
    p.activate_attack_cd();
    p.activate_move_cd();
    sp = piece.serialize(p, [1, 2]);
    [pd, [x, y]] = piece.deserialize(sp);
    assert(x, 1, 'x');
    assert(y, 2, 'y');
    compare_pieces(pd, p);
    return console.log('piece test passed');
  };

  compare_pieces = function(p, p0) {
    var a, k, len, ref, results;
    ref = piece.serialization_attributes;
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      a = ref[k];
      results.push(assert(p[a], p0[a], a));
    }
    return results;
  };

  assert = function(value, expected, msg) {
    if (value !== expected) {
      console.log('assertion fail', value, expected, msg);
      throw 'test failed';
    }
  };

  window.gamestatetest = {test};

}).call(this);

//# sourceMappingURL=gamestate_test.js.map
